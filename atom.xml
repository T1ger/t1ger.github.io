<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>t1ger的茶馆</title>
  <subtitle>头顶有光终是幻，足下生云未是仙</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://t1ger.github.io/"/>
  <updated>2016-09-28T06:55:23.058Z</updated>
  <id>https://t1ger.github.io/</id>
  
  <author>
    <name>t1ger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Security on nginx</title>
    <link href="https://t1ger.github.io/2016/09/28/Security-on-nginx/"/>
    <id>https://t1ger.github.io/2016/09/28/Security-on-nginx/</id>
    <published>2016-09-28T05:01:23.000Z</published>
    <updated>2016-09-28T06:55:23.058Z</updated>
    
    <content type="html"><![CDATA[<p>闲言少续，直接上配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"> </div><div class="line">  listen [::]:443 default_server;</div><div class="line"> </div><div class="line">  ssl on;</div><div class="line">  ssl_certificate_key /etc/ssl/cert/abc.pem;</div><div class="line">  ssl_certificate /etc/ssl/cert/abc.pem;</div><div class="line"> </div><div class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">  ssl_ciphers &apos;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&apos;;</div><div class="line">  ssl_prefer_server_ciphers on;</div><div class="line">  </div><div class="line">  ssl_session_cache shared:SSL:50m;</div><div class="line"> </div><div class="line">  ssl_stapling on;</div><div class="line">  ssl_stapling_verify on;</div><div class="line">  resolver 8.8.4.4 8.8.8.8 valid=300s;</div><div class="line">  resolver_timeout 10s;</div><div class="line"> </div><div class="line">  </div><div class="line">  ssl_dhparam /etc/ssl/certs/dhparam.pem;</div><div class="line"> </div><div class="line">  add_header Strict-Transport-Security max-age=63072000;</div><div class="line">  add_header X-Frame-Options DENY;</div><div class="line">  add_header X-Content-Type-Options nosniff;</div><div class="line"> </div><div class="line">  root /var/www/;</div><div class="line">  index index.html index.htm;</div><div class="line">  server_name abc.org;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析：</p>
<p>ssl_dhparam /etc/ssl/certs/dhparam.pem; //nginx在DHE密钥交换的时候使用它<br>产生一个更强的DHE参数<br>cd /etc/ssl/certs<br>openssl dhparam -out dhparam.pem 4096</p>
<p>参考</p>
<p><a href="https://www.ssllabs.com/ssltest" target="_blank" rel="external">SSL 实验室测试(SSL Labs tes)</a> ,赶紧去测试吧<br><a href="https://cipherli.st/" target="_blank" rel="external">Strong Ciphers </a><br><a href="https://gist.github.com/gavinhungry/7a67174c18085f4a23eb" target="_blank" rel="external">Nginx SSL/TLS configuration for “A+” Qualys SSL Labs rating</a><br><a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/" target="_blank" rel="external">Mozilla SSL Configuration Generator</a></p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      how to strong Security on nginx
    
    </summary>
    
    
      <category term="nginx https ssl" scheme="https://t1ger.github.io/tags/nginx-https-ssl/"/>
    
  </entry>
  
  <entry>
    <title>how to send a https request in nodejs</title>
    <link href="https://t1ger.github.io/2016/09/27/how-to-send-a-https-request-in-nodejs/"/>
    <id>https://t1ger.github.io/2016/09/27/how-to-send-a-https-request-in-nodejs/</id>
    <published>2016-09-26T16:20:44.000Z</published>
    <updated>2016-09-26T15:53:23.250Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Steps-to-send-a-https-request-to-a-rest-service-in-Node-js"><a href="#Steps-to-send-a-https-request-to-a-rest-service-in-Node-js" class="headerlink" title="Steps to send a https request to a rest service in Node js"></a>Steps to send a https request to a rest service in Node js</h4><ul>
<li>a)use request</li>
</ul>
<pre><code>var request = require(&apos;request&apos;);
var options = {
    url:&apos;https://abc.example.com.cn/In/index.php?m=Info&amp;a=Address&apos;,
    headers: {
        &apos;User-Agent&apos;: &apos;request&apos;
    },
    rejectUnauthorized: false
};
function callback(error, response, body) {
    if (!error &amp;&amp; response.statusCode == 200) {
        var info = JSON.parse(body);
        console.log(info);
    }else{
        console.log(error);
    }
}
request(options, callback);
</code></pre><ul>
<li>b)use https</li>
</ul>
<pre><code>var https = require(&apos;https&apos;);
        var options = {
            host: &apos;abc.example.com.cn&apos;,
            port: 443,
            path: &apos;/In/index.php?m=Info&amp;a=Address&apos;,
            method: &apos;GET&apos;,
            rejectUnauthorized: false
            };
        var req = https.request(options, function(res) {
        console.log(&apos;STATUS: &apos; + res.statusCode);
        console.log(&apos;HEADERS: &apos; + JSON.stringify(res.headers));
        res.setEncoding(&apos;utf8&apos;);
        res.on(&apos;data&apos;, function (chunk) {
        console.log(&apos;BODY: &apos; + chunk);
        });
        });
        req.on(&apos;error&apos;, function(e) {
        console.log(&apos;problem with request: &apos; + e.message);
        });
        // write data to request body
        req.write(&apos;data\n&apos;);
        req.write(&apos;data\n&apos;);
        req.end();    
</code></pre><hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      how to send a https request in nodejs
    
    </summary>
    
    
      <category term="nodejs https" scheme="https://t1ger.github.io/tags/nodejs-https/"/>
    
  </entry>
  
  <entry>
    <title>MySQL复制概述(二)</title>
    <link href="https://t1ger.github.io/2016/09/25/MySQL%E5%A4%8D%E5%88%B6%E6%A6%82%E8%BF%B0-%E4%BA%8C/"/>
    <id>https://t1ger.github.io/2016/09/25/MySQL复制概述-二/</id>
    <published>2016-09-25T08:28:12.000Z</published>
    <updated>2016-09-26T03:45:53.548Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在上一文章中，我们了解了mysql5.5x系列的mysql复制，这篇文章我们主要介绍mysql5.7版本下的GTID主从复制</p>
<pre><code>什么是GTID
GTID = source_id:transaction_id
开启GTID的必备条件
gtid_mod=ON
enforce-gtid-consistency
log_bin=ON(可选)
log-slave-updates=ON(可选)
</code></pre><h6 id="a-标准安装步骤"><a href="#a-标准安装步骤" class="headerlink" title="a)标准安装步骤"></a>a)标准安装步骤</h6><ul>
<li>同步所有servers<pre><code>mysql&gt; set @@global.read_only = ON;
注： 执行前slave务必执行完所以更新
</code></pre></li>
<li>关闭所有servers<pre><code>shell&gt; mysqladmin -uusername -p shutdown
</code></pre></li>
<li><p>重启服务，并开启GTID</p>
<pre><code>shell&gt; mysqld --gtid-mode=ON --log-bin --enforce-gtid-consistency &amp;
</code></pre></li>
<li><p>执行同步命令</p>
<pre><code>mysql&gt; change master to
    master_host = host,
    master_port = port,
    master_user = user,
    master_password = password,
    master_auto_position = 1;
mysql&gt; start slave;
</code></pre></li>
<li><p>取消master的只读模式</p>
<pre><code>mysql&gt; set @@global.read_only = OFF;
</code></pre></li>
</ul>
<h6 id="b-从备份中恢复"><a href="#b-从备份中恢复" class="headerlink" title="b)从备份中恢复"></a>b)从备份中恢复</h6><ul>
<li><p>备份</p>
<pre><code>mysqldump --all-databases --single-transaction --trigger --routines --user=root -p &gt;backup.sql
# grep PURGED backup.sql
SET @@GLOBAL.GTID_PURGED=&apos;9a511b7b-7059-11e2-9a24-08002762b8af:1-13&apos;;
</code></pre></li>
<li><p>在slave上reset master ,导入备份<br>注：如果是逻辑导入，请设置sql_log_bin=off</p>
<pre><code>mysql&gt; reset master;
mysql&gt; show global variables like &apos;gtid_executed&apos;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| gtid_executed |       |
+---------------+-------+
mysql&gt; show global variables like &apos;gtid_purged&apos;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| gtid_purged   |       |
+---------------+-------+
mysql&gt; source backup.sql

mysql&gt; show global variables like &apos;gtid_executed&apos;;
+---------------+-------------------------------------------+
| Variable_name | Value                                     |
+---------------+-------------------------------------------+
| gtid_executed | 9a511b7b-7059-11e2-9a24-08002762b8af:1-13 |
+---------------+-------------------------------------------+
mysql&gt; show global variables like &apos;gtid_purged&apos;;
+---------------+-------------------------------------------+
| Variable_name | Value                                     |
+---------------+-------------------------------------------+
| gtid_purged   | 9a511b7b-7059-11e2-9a24-08002762b8af:1-13 |
+---------------+-------------------------------------------+
</code></pre></li>
<li><p>执行同步命令</p>
<pre><code>mysql&gt; change master to
    master_host = host,
    master_port = port,
    master_user = user,
    master_password = password,
    master_auto_position = 1;
mysql&gt; start slave;
</code></pre></li>
<li><p>主从复制常见错误<br> Slave_IO_Running: No<br> Slave_SQL_Running: Yes<br> Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: ‘The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.’</p>
<p> 在master上查看GTID_EXECUTED</p>
<pre><code>mysql&gt; show global variables like &apos;GTID_EXECUTED&apos;;
+---------------+-------------------------------------------+
| Variable_name | Value                                     |
+---------------+-------------------------------------------+
| gtid_executed | 9a511b7b-7059-11e2-9a24-08002762b8af:1-14 |
+---------------+-------------------------------------------+
</code></pre><p>解决：</p>
<pre><code>mysql&gt;reset master;
mysql&gt;show global variables like &apos;GTID_EXECUTED&apos;;
    +---------------+-------+
    | Variable_name | Value |
    +---------------+-------+
    | gtid_executed |       |
    +---------------+-------+
mysql&gt; set global GTID_PURGED=&quot;9a511b7b-7059-11e2-9a24-08002762b8af:1-14&quot;;
mysql&gt; start slave io_thread;
mysql&gt; show slave status\G;
</code></pre></li>
</ul>
<ul>
<li>工具<br><a href="https://www.percona.com/software/mysql-database/percona-xtrabackup" target="_blank" rel="external">Percona XtraBackup</a></li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;在上一文章中，我们了解了mysql5.5x系列的mysql复制，这篇文章我们主要介绍mysql5.7版本下的GTID主从复制&lt;/p&gt;
&lt;pr
    
    </summary>
    
    
      <category term="mysql linux" scheme="https://t1ger.github.io/tags/mysql-linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL复制概述(一)</title>
    <link href="https://t1ger.github.io/2016/09/25/MySQL%E5%A4%8D%E5%88%B6%E6%A6%82%E8%BF%B0-%E4%B8%80/"/>
    <id>https://t1ger.github.io/2016/09/25/MySQL复制概述-一/</id>
    <published>2016-09-25T06:25:48.000Z</published>
    <updated>2016-09-26T03:43:01.160Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>master将数据变化记录到bin-log日志中，然后slave服务器通过I/O线程读取master的bin-log日志，并将其写人slave服务器的relay-log日志中，接着sql线程读取relay-log日志，并在slave中执行，从而实现mysql复制。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li><p>标准安装步骤<br>1.1 建立复制账户，配置主、从服务器的my.cnf<br>1.2 复制master数据<br>1.3 在slave上应用master数据，并执行同步命令。<br>注 本文针对mysql5.5x系列</p>
<pre><code>mysql&gt; create user &apos;repl&apos;@&apos;&lt;slave_host&gt;&apos; identified by &apos;&lt;slave_password&gt;&apos;;
mysql&gt; grant replication slave on *.* to  &apos;repl&apos;@&apos;&lt;slave_host&gt;&apos;;

master的my.cnf
[mysqld]

server_id = 100
log_bin = mysql-bin
log_bin_index = mysql-bin.index
sync_binlog = 1
innodb_flush_log_at_trx_commit = 1
innodb_support_xa = 1
</code></pre><p>  server_id一定保证唯一<br>  log_bin如不指定，缺省使用主机名(relay-log同样需要)。</p>
<pre><code>slave的my.cnf
[mysqld]
server_id = 101
log_bin = mysql-bin
log_bin_index = mysql-bin.index
relay-log = mysql-relay-bin
relay-log-inex = mysql-relay-bin.index
read_only = 1
skip_slave_start = 1
log_slave_updates = 1
</code></pre><p>  复制master数据,并执行同步命令。</p>
<pre><code>shell&gt;mysqldump --all-databases --master-data=1 &gt; backup.sql

在slave上应用master数据，并执行同步命令。
shell&gt; mysql &lt; backup.sql
shell&gt; grep -i &quot;CHANGE MASTER TO&quot; backup.sql

mysql&gt;change master to
    master_host=&apos;&lt;master_host&gt;&apos;,
    master_user=&apos;&lt;slave_user&gt;&apos;,
    master_password=&apos;&lt;slave_password&gt;&apos;,
    master_log_file=&apos;&lt;Relay_Master_Log_File&gt;&apos;,
    master_log_pos=&apos;&lt;Exec_Master_Log_Pos&gt;&apos;;
mysql&gt;start slave;
mysql&gt;show slave status;
</code></pre></li>
<li><p>从已存在slave上新建slave服务器<br>  在旧slave上查看日志信息</p>
<pre><code>mysql&gt;show slave status;
</code></pre><p>  记录下Relay_Master_Log_File&amp;Exec_Master_Log_Pos</p>
<p>  在新slave上执行</p>
<pre><code>mysql&gt;chang master to
    master_host=&apos;&lt;master_host&gt;&apos;,
    master_user=&apos;&lt;slave_user&gt;&apos;,
    master_password=&apos;&lt;slave_password&gt;&apos;,
    master_log_file=&apos;&lt;Relay_Master_Log_File&gt;&apos;,
    master_log_pos=&apos;&lt;Exec_Master_Log_Pos&gt;&apos;;
mysql&gt;start slave;
mysql&gt;show slave status;
</code></pre></li>
<li><p>主从复制常见错误</p>
<pre><code>Error &apos;Duplicate entry …&apos; for key … on query
</code></pre><p>  最好是找出有问题数据，然后主从复制恢复正常，如果不行，可以在slave上使用sql_slave_skip_counter</p>
<pre><code>mysql&gt;slave stop;
mysql&gt;set global sql_slave_skip_counter =1;
mysql&gt;start slave;
</code></pre><p>  在错误很多的时候，如果手工操作会累成狗的，通常这样可以使用pt-table-checksum和pt-table-sync</p>
</li>
<li><p>工具<br><a href="https://www.percona.com/software/mysql-database/percona-xtrabackup" target="_blank" rel="external">Percona XtraBackup</a></p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;p&gt;master将数据变化记录到bin-log日志中，然后slave服务器通过I/O线程读取master的bin-log日志，并将其写人slav
    
    </summary>
    
    
      <category term="mysql linux" scheme="https://t1ger.github.io/tags/mysql-linux/"/>
    
  </entry>
  
  <entry>
    <title>Confluence 重置密码步骤</title>
    <link href="https://t1ger.github.io/2016/09/21/Confluence-%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E6%AD%A5%E9%AA%A4/"/>
    <id>https://t1ger.github.io/2016/09/21/Confluence-重置密码步骤/</id>
    <published>2016-09-21T11:07:00.000Z</published>
    <updated>2016-09-26T03:42:07.066Z</updated>
    
    <content type="html"><![CDATA[<p>当我们忘记Confluence密码或者不能作为admin登陆的话，请参考以下方法：</p>
<ul>
<li><p>首先，你的有mysql或者其他数据库的权限啦，找到admin权限的用户</p>
<pre><code>select u.id, u.user_name, u.active from cwd_user u
join cwd_membership m on u.id=m.child_user_id join cwd_group g on m.parent_id=g.id join cwd_directory d on d.id=g.directory_id
where g.group_name = &apos;confluence-administrators&apos; and d.directory_name=&apos;Confluence Internal Directory&apos;;
确保找到的用户处于激活状态
UPDATE cwd_user
SET active = &apos;T&apos;
WHERE user_name =&apos;&lt;user_name&gt;&apos;;
</code></pre></li>
<li><p>如果没有local admin存在，那我们只好自己建立了。</p>
<pre><code>insert into cwd_user(id, user_name, lower_user_name, active, created_date, updated_date, first_name, lower_first_name, last_name, lower_last_name, display_name, lower_display_name, email_address, lower_email_address, directory_id, credential) values (1212121, &apos;admin&apos;, &apos;admin&apos;, &apos;T&apos;, &apos;2009-11-26 17:42:08&apos;, &apos;2009-11-26 17:42:08&apos;, &apos;A. D.&apos;, &apos;a. d.&apos;, &apos;Ministrator&apos;, &apos;ministrator&apos;, &apos;A. D. Ministrator&apos;, &apos;a. d. ministrator&apos;, &apos;admin@example.com&apos;, &apos;admin@example.com&apos;, (select id from cwd_directory where directory_name=&apos;Confluence Internal Directory&apos;), &apos;x61Ey612Kl2gpFL56FT9weDnpSo4AV8j8+qx2AuTHdRyY036xxzTTrw10Wq3+4qQyB+XURPWx1ONxp3Y3pB37A==&apos;);

insert into user_mapping values (&apos;2c9681954172cf560000000000000001&apos;, &apos;admin&apos;, &apos;admin&apos;);

添加新组

insert into cwd_group(id, group_name, lower_group_name, active, local, created_date, updated_date, description, group_type, directory_id)
values ( &apos;888888&apos;,&apos;confluence-administrators&apos;,&apos;confluence-administrators&apos;,&apos;T&apos;,&apos;F&apos;,&apos;2011-03-21 12:20:29&apos;,&apos;2011-03-21 12:20:29&apos;,NULL,&apos;GROUP&apos;,(select id from cwd_directory where directory_name=&apos;Confluence Internal Directory&apos;));
insert into cwd_group(id, group_name, lower_group_name, active, local, created_date, updated_date, description, group_type, directory_id)
values ( &apos;999999&apos;,&apos;confluence-users&apos;,&apos;confluence-users&apos;,&apos;T&apos;,&apos;F&apos;,&apos;2011-03-21 12:20:29&apos;,&apos;2011-03-21 12:20:29&apos;,NULL,&apos;GROUP&apos;,(select id from cwd_directory where directory_name=&apos;Confluence Internal Directory&apos;));

添加组关系
insert into cwd_membership (id, parent_id, child_user_id) values (888888, (select id from cwd_group where group_name=&apos;confluence-users&apos; and directory_id=(select id from cwd_directory where directory_name=&apos;Confluence Internal Directory&apos;)), 1212121);
insert into cwd_membership (id, parent_id, child_user_id) values (999999, (select id from cwd_group where group_name=&apos;confluence-administrators&apos; and directory_id=(select id from cwd_directory where directory_name=&apos;Confluence Internal Directory&apos;)), 1212121);

如果你用的是oracle数据库，请用 sysdate 代替 created_date.
</code></pre></li>
<li><p>替换admin密码，加密后的密码如下<br>  x61Ey612Kl2gpFL56FT9weDnpSo4AV8j8+qx2AuTHdRyY036xxzTTrw10Wq3+4qQyB+XURPWx1ONxp3Y3pB37A==，为了更改密码，我们要关闭Confluence<br>登陆mysql执行</p>
<pre><code>update cwd_user set credential =
&apos;x61Ey612Kl2gpFL56FT9weDnpSo4AV8j8+qx2AuTHdRyY036xxzTTrw10Wq3+4qQyB+XURPWx1ONxp3Y3pB37A==&apos;
where id=&lt;id from Stage 1&gt;;
</code></pre></li>
</ul>
<ul>
<li><p>更改Internal Directory 为第一</p>
<pre><code>找到directory 名

select d.id, d.directory_name, m.list_index from cwd_directory d join cwd_app_dir_mapping m on d.id=m.directory_id;

交换directory顺序

update cwd_app_dir_mapping set list_index = 0 where directory_id = &lt;Internal Directory id&gt;;
update cwd_app_dir_mapping set list_index = &lt;Noted Internal Directory list_index&gt; where directory_id = &lt;Directory id that had list_index 0&gt;;

查看是否激活directory
select id, directory_name, active from cwd_directory where id = &lt;Internal Directory id&gt;;

如果必要，激活

update cwd_directory set active = &apos;T&apos; where id = &lt;Internal Directory id&gt;;
</code></pre></li>
</ul>
<p>重启登陆，打完收工</p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们忘记Confluence密码或者不能作为admin登陆的话，请参考以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先，你的有mysql或者其他数据库的权限啦，找到admin权限的用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select u.id, u.user_name, u.
    
    </summary>
    
    
      <category term="Confluence openldap" scheme="https://t1ger.github.io/tags/Confluence-openldap/"/>
    
  </entry>
  
  <entry>
    <title>openldap集成系列</title>
    <link href="https://t1ger.github.io/2016/09/16/openldap%E9%9B%86%E6%88%90%E7%B3%BB%E5%88%97/"/>
    <id>https://t1ger.github.io/2016/09/16/openldap集成系列/</id>
    <published>2016-09-15T15:31:07.000Z</published>
    <updated>2016-09-26T03:44:47.690Z</updated>
    
    <content type="html"><![CDATA[<p>闲言少叙，先来个svn集成配置</p>
<pre><code>&lt;Location /svn&gt;
DAV svn
SVNParentPath /opt/repo
#SVNPath /opt/repo
AuthType Basic
AuthName &quot;SVN Repo&quot;
#AuthUserFile /opt/svnconf/svn_access_file
AuthzLDAPAuthoritative off
AuthLDAPBindDN &quot;cn=admin,dc=abc,dc=com,dc=cn&quot;
AuthLDAPBindPassword &quot;abc123&quot;
AuthBasicProvider ldap
AuthLDAPURL &quot;ldap://192.168.1.102:389/ou=user,dc=abc,dc=com,dc=cn?cn?sub?(objectClass=*)&quot;
AuthzSVNAccessFile /opt/svnconf/svn_auth_file
Require valid-user
&lt;/Location&gt;
</code></pre><p>proftp集成配置</p>
<pre><code>LDAPAttr uid cn
LDAPServer      ldap://192.168.1.102:389/??sub
LDAPAuthBinds on
DAPBindDN      &quot;cn=admin,dc=abc,dc=com,dc=cn&quot; &quot;abc123&quot;
LDAPUsers       &quot;ou=user,dc=abc,dc=com,dc=cn&quot; (uid=%v)
LDAPGroups       ou=ftp,ou=permission,dc=abc,dc=com,dc=cn
</code></pre><p>不断更新中</p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲言少叙，先来个svn集成配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Location /svn&amp;gt;
DAV svn
SVNParentPath /opt/repo
#SVNPath /opt/repo
AuthType Basic
AuthName &amp;quot;SVN
    
    </summary>
    
    
      <category term="openldap linux svn proftp" scheme="https://t1ger.github.io/tags/openldap-linux-svn-proftp/"/>
    
  </entry>
  
  <entry>
    <title>svn镜像的快速实现</title>
    <link href="https://t1ger.github.io/2016/09/15/svn%E9%95%9C%E5%83%8F%E7%9A%84%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://t1ger.github.io/2016/09/15/svn镜像的快速实现/</id>
    <published>2016-09-15T14:19:00.000Z</published>
    <updated>2016-09-26T03:44:29.940Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>在实际的应用环境，现有的SVN代码库数据量大，而svnsync却需要先初始化一个空库，然后再从0开始一直同步到相同的版本；<br>而主从服务器之间网络不好，因此需要较长时间或者传输中断。</p>
<h3 id="配置过程："><a href="#配置过程：" class="headerlink" title="配置过程："></a>配置过程：</h3><ul>
<li><p>备份主库(master)<br>svnadmin hotcopy path/to/repository path/to/backup –clean-logs<br>推荐使用hotcopy ，另外一种方法：<br>svnadmin dump <a href="http://source-server/svn/source-repo" target="_blank" rel="external">http://source-server/svn/source-repo</a> &gt; source-repo.dump</p>
</li>
<li><p>将备份文件拷贝到从服务器上(master)</p>
</li>
<li><p>在slave上创建一个mirror库</p>
<p>  svnadmin create Code<br>  chown -R apache.apache Code<br>  cd Code/hooks<br>  cp -p pre-revprop-change.tmpl pre-revprop-change<br>  chmod+x pre-revporp-change</p>
<p>  vim pre-revporp-change<br>删除以下内容：<br>  if [ “$ACTION” = “M” -a “$PROPNAME” = “svn:log” ]; then exit 0; fi<br>  echo “Changing revision properties other than svn:log is prohibited” &gt;&amp;2<br>  exit 1</p>
</li>
<li><p>设置mirror只对同步用户可写<br>[/]* = r<br>svnsync = rw<br>或者<br>使用start-commit 检查svnsync用户，下面是一个例子，是shell脚本：</p>
<p>  #!/bin/sh<br>  USER=”$2″<br>  if [ “$USER” = “svnsync” ]; then<br>  exit 0<br>  fi<br>  echo “Only the svnsync user may commit new revisions as this is a read-only, mirror repository.” &gt;&amp;2<br>  exit 1 </p>
</li>
</ul>
<ul>
<li><p>在master上通过svnsync 初始化(master)<br>svnsync initialize URL_MIRROR_REPO URL_MASTER_REPO –username=svnsync –password=svnsyncpassword<br>svnsync init file:///home/backup/svn/svnsync/Project1/  <a href="http://svntest.subversion.com/repos/Project1" target="_blank" rel="external">http://svntest.subversion.com/repos/Project1</a><br>语法是：svnsync init {你刚创建的库url} {源库url}<br>注意本地url是三个斜杠的：///</p>
<p>  svnsync init <a href="http://192.168.1.100/svn/Code" target="_blank" rel="external">http://192.168.1.100/svn/Code</a> <a href="http://192.168.1.101/svn/Code" target="_blank" rel="external">http://192.168.1.101/svn/Code</a> –username=svnsync –password=svnsync</p>
</li>
<li><p>在slave上备份初始化后的库(slave)<br>  cd /data/backup<br>  mv Code /opt/mirrorbak</p>
</li>
<li><p>将主库备份文件放到相应位置，并进行部分文件替换(slave)</p>
<p>  替换钩子文件<br>  cd Code/hooks<br>  cp -p /opt/mirrorbak/hooks/pre-revporp-change .<br>  替换uuid<br>  cd ../db/<br>  cp -p /opt/mirrorbak/hooks/db/uuid .</p>
<p>  替换初始版本日志<br>  cd revprops/0/<br>  cp -p /opt/mirrorbak/db/revprops/0/0 .</p>
<p>  更改仓库目录属主<br>  chown -R apache.apache /data/backup/Code</p>
</li>
<li><p>复制sync-last-merged-rev（最后一次同步）版本号(master)<br>  获取当前版本号，eg:7289<br>  cat Code/db/current<br>  将当前版本好复制到slave<br>  svn propset –revprop -r0 svn:sync-last-merged-rev 7289 <a href="http://192.168.1.100/svn/Code" target="_blank" rel="external">http://192.168.1.100/svn/Code</a><br>  执行一次同步<br>  svnsync sync <a href="http://192.168.1.100/svn/Code" target="_blank" rel="external">http://192.168.1.100/svn/Code</a></p>
</li>
<li><p>配置实时同步<br>  在主库的hooks目录下开启post-commit<br>  mv post-commit.tmpl post-commit<br>  chmod +x post-commit<br>  svnsync synchronize <a href="http://192.168.1.100/svn/Code" target="_blank" rel="external">http://192.168.1.100/svn/Code</a> –username=svnsync –password=svnsync &amp;<br>  exit 0 </p>
</li>
<li><p>配置slave只让sync用户提交</p>
<p>  pre-revprop-change<br>  if [ “$USER” = “svnsync” ]; then<br>  exit 0<br>  fi<br>  echo “Only the svnsync user may change revision properties as this is a read-only, mirror repository.” &gt;&amp;2<br>  exit 1 </p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;p&gt;在实际的应用环境，现有的SVN代码库数据量大，而svnsync却需要先初始化一个空库，然后再从0开始一直同步到相同的版本；&lt;br&gt;而主从服务
    
    </summary>
    
    
      <category term="svn http linux" scheme="https://t1ger.github.io/tags/svn-http-linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql 字段自定义排序问题</title>
    <link href="https://t1ger.github.io/2016/09/13/mysql-%E5%AD%97%E6%AE%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://t1ger.github.io/2016/09/13/mysql-字段自定义排序问题/</id>
    <published>2016-09-13T08:13:27.000Z</published>
    <updated>2016-09-26T03:43:45.693Z</updated>
    
    <content type="html"><![CDATA[<p>今天碰到一个问题，指定mysql字段自定义排序</p>
<pre><code>SELECT id FROM table  WHERE `id` IN (40593,6352,38120,56049,56050,56051);
</code></pre><p>外事不决问google，经过搜索，网上的建议是使用FIELD()和FIND_IN_SET():</p>
<pre><code>SELECT id FROM table  WHERE `id` IN (40593,6352,38120,56049,56050,56051) order by FIELD(id,6352,38120)desc ;

SELECT id FROM table  WHERE `id` IN (40593,6352,38120,56049,56050,56051) order by FIND_IN_SET(username,&quot;6352,38120&quot;);
</code></pre><p>继续google之,又找到一个建议，使用substring_index：</p>
<p>substring_index(str,delim,count) str:要处理的字符串 delim:分隔符 count:计数</p>
<p>str=www.google.com<br>substring_index(str,’.’,1)<br>结果是：www<br>substring_index(str,’.’,2)<br>结果是：www.google<br>即如果count是正数，那么就是从左往右数，第N个分隔符的左边的全部内容<br>相反，如果是负数，那么就是从右边开始数，第N个分隔符右边的所有内容，如：<br>substring_index(str,’.’,-2)<br>结果为：google.com<br>有人会说，如果我要中间的google怎么办？<br>很简单的，两个方向：<br>1、从右数第二个分隔符的右边全部，再从左数的第一个分隔符的左边：<br>substring_index(substring_index(str,’.’,-2),’.’,1);<br>2、你懂得！</p>
<pre><code>SELECT id FROM table  WHERE `id` IN (40593,6352,38120,56049,56050,56051) order by substring_index(&apos;40593&apos;,username,1);
</code></pre><p>完美解决，更多详细讨论请移步<a href="http://dev.mysql.com/doc/refman/5.7/en/sorting-rows.html" target="_blank" rel="external">官网讨论</a></p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天碰到一个问题，指定mysql字段自定义排序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT id FROM table  WHERE `id` IN (40593,6352,38120,56049,56050,56051);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;外事不决问goo
    
    </summary>
    
    
      <category term="mysql" scheme="https://t1ger.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>五分钟快速了解 MySQL8新特性</title>
    <link href="https://t1ger.github.io/2016/09/13/%E4%BA%94%E5%88%86%E9%92%9F%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3-MySQL8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://t1ger.github.io/2016/09/13/五分钟快速了解-MySQL8新特性/</id>
    <published>2016-09-13T02:42:57.000Z</published>
    <updated>2016-09-26T03:45:28.950Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL Community Server 8.0.0 dmr(Development Milestone Release)终于发布了，8.0的发布，可以说是MySQL来到了一个崭新的时代。MySQL终于废弃了MyISAM引擎，完成了MySQL的完美转身。</p>
<p>MySQL的来历</p>
<p>MySQL是一个小型关系型数据库管理系统，开发者为瑞典MySQL AB公司。在2008年1月16号被Sun公司收购。而2009年,SUN又被Oracal收购。</p>
<p>MySQL的标志趣闻</p>
<p>MySQL的海豚标志的名字叫“sakila”，它是由MySQL AB的创始人从用户在“海豚命名”的竞赛中建议的大量的名字表中选出的。获胜的名字是由来自非洲斯威士兰的开源软件开发者Ambrose Twebaze提供。根据Ambrose所说，Sakila来自一种叫SiSwati的斯威士兰方言，也是在Ambrose的家乡乌干达附近的坦桑尼亚的Arusha的一个小镇的名字。    </p>
<p>这里吐槽一下的是MySQL的体积是越来越大了，几乎1G的大小让用户情何以堪呀，好怀念以前的时光呀。自从oracle收购了MySQL以后，体积是越来越向oracle看齐了。</p>
<p>闲言少续，让我们一起看看MySQL的变化吧：</p>
<ul>
<li>账户管理，官方正式支持MySQL的ROLE了，grant tables 现在是InnoDB引擎了，放弃了先前的MyISAM。</li>
<li>参数持久化，支持 SET语句并将参数写入data 目录下MySQLd-auto.cnf。在MySQL重启时，MySQL将优先读取此文件。</li>
<li>MySQL的初始化， MySQL将使用–initialize or –initialize-insecure 代替 MySQL_install_db</li>
<li>The .frm 元数据不在存在，元数据文件将存储在数据字典表中。</li>
<li>MySQL 现在支持 invisible indexes。这对dba来说可是个福音，小伙伴们可以不用移除index而放心测试查询性能了。</li>
<li>mysqld 不在支持  –partition and –skip-partition 选项。</li>
<li>持久化自增值。通过将 auto-increment 值写入redo 日志来持久化自增值，优雅的解决了这一历史问题。</li>
</ul>
<p>上述只是8.0改进的一小部分，感兴趣的同学请移步官网。</p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL Community Server 8.0.0 dmr(Development Milestone Release)终于发布了，8.0的发布，可以说是MySQL来到了一个崭新的时代。MySQL终于废弃了MyISAM引擎，完成了MySQL的完美转身。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://t1ger.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>提高工作效率之vim篇</title>
    <link href="https://t1ger.github.io/2016/09/09/%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E4%B9%8Bvim%E7%AF%87/"/>
    <id>https://t1ger.github.io/2016/09/09/提高工作效率之vim篇/</id>
    <published>2016-09-09T06:50:23.000Z</published>
    <updated>2016-09-26T03:52:27.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动及关闭-Vi-Vim"><a href="#启动及关闭-Vi-Vim" class="headerlink" title="启动及关闭 Vi/Vim"></a>启动及关闭 Vi/Vim</h3><pre><code>1. vi 打开 Vi/Vim
   vi &lt;file&gt; 打开 Vi/Vim 并加载文件 &lt;file&gt;
2. ZQ 无条件退出 
   :q! 无条件退出
   ZZ 存盘并退出
   :wq 存盘并退出
3. :m,nw &lt;file&gt; 将 m 行到 n 行部分的内容保存到文件 &lt;file&gt; 中 
   :m,nw &gt;&gt; &lt;file&gt; 将 m 行到 n 行的内容添加到文件 &lt;file&gt; 的末尾
</code></pre><p>在使用 Vi/Vim 的时候，有时想临时退出 Vi/Vim，转到 shell 环境里去做一些操作，等这些操作结束后，再继续回到刚才的 Vi/Vim 状态。<br>有两种方法可以可以实现临时退出 Vi/Vim、进入 shell 环境后再回来的要求：<br><strong>方法一：使用 Ctrl-z 以及 fg 这两个命令组合。</strong></p>
<ul>
<li>Ctrl-z 命令将当前的 Vi/Vim 进程放到后台执行，之后 shell 环境即可为你所用；fg 命令则将位于后台的 Vi/Vim 进程放到前台执行，这样我们就再次进入 Vi/Vim 操作界面并恢复到原先的编辑状态。</li>
</ul>
<p><strong>方法二：使用行命令 :sh。</strong> </p>
<ul>
<li>在 Vi/Vim 的正常模式下输入 :sh即可进入 Linux/Unix shell 环境。在要返回到 Vi/Vim 编辑环境时，输入 exit 命令即可。</li>
</ul>
<h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><p>要正确高效的运用 Vi/Vim 的各种操作，一定要把握这一原则: <strong>先定单位再定量。</strong> 操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：5h 命令左移 5 个字符，8w 命令右移 8 个单词。</p>
<p>Vi/Vim 中操作单位有很多，按从小到大的顺序为（括号内为相应的操作命令）：字符（h、l）→ 单词 (w、W、b、B、e) → 行 (j、k、0、^、$、:n) → 句子（(、)）→ 段落（{、}）→ 屏 (H、M、L) → 页（Ctrl-f、Ctrl-b、Ctrl-u、Ctrl-d) → 文件（G、gg、:0、:$）。</p>
<p>除了这些基本单位之外，还有 %（跳转到与之匹配的括号处），`.（跳转到最近修改过的位置并定位编辑点）, ‘.（跳转到最近修改过的位置但不定位编辑点）这三个命令也非常重要，在 Vi/Vim 中灵活使用会极大提高效率。% 除用于光标移动之后，还可用于检测源码中各种括号的匹配情况。</p>
<pre><code>1. fa → 到下一个为a的字符处,你也可以fs到下一个为s的字符
2. 0 移到当前行开头 
   ^ 移到当前行的第一个非空字符
   $ 移到当前行末尾
   :n 移动到第 n 行
3. ) 移动到当前句子的末尾
   ( 移动到当前句子的开头
4. } 移动当前段落的末尾
   { 移到当前段落的开头
5. H 移动到屏幕的第一行
   M 移动到屏幕的中间一行
   L 移动到屏幕的最后一行
6. Ctrl-f 向前滚动一页
   Ctrl-b 向后滚动一页
   Ctrl-u 向前滚动半页
   Ctrl-d 向后滚动半页
7. G 移动到文件末尾
   gg 移动到文件开头
   :0 移动到文件第一行
   :$ 移动到文件最后一行
</code></pre><hr>
<p>除了这些基本单位之外，还有 %（跳转到与之匹配的括号处），`.（跳转到最近修改过的位置并定位编辑点）, ‘.（跳转到最近修改过的位置但不定位编辑点）这三个命令也非常重要，在 Vi/Vim 中灵活使用会极大提高效率。% 除用于光标移动之后，还可用于检测源码中各种括号的匹配情况。</p>
<hr>
<h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><p>与光标移动一样，Vi/Vim 中关于编辑操作的命令也比较多，但操作单位要比移动光标少得多。按从小到大的顺序为（括号内为相应的操作命令）：字符 （x、c、s、r、i、a）→ 单词 (cw、cW、cb、cB、dw、dW、db、dB) → 行 (dd、d0、d$、I、A、o、O) → 句子（(、)）→ 段落（{、}）。这些操作单位有些可以加操作次数。操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：d3w 命令删除三个单词，10dd 命令删除十行。</p>
<pre><code>1. dd 删除当前行
   d0 删除从当前光标开始到行末的内容
   d$ 删除从当前光标开始到行末的内容
2. d) 删除当前句子从光标位置开始到句末的内容
   d( 删除当前句子从光标位置开始到句首的内容
3. d} 删除当前段落从光标位置开始到段末的内容
   d{ 删除当前段落从光标位置开始到段首的内容
4. yw 复制当前单词从光标开始的部分
   yy 复制光标所在行的所有字符;p 将最后一个删除或复制文本放在当前字符 
5. u 撤消更改
   Ctrl-R 重做更改
6. . 重复上次操作(. 为小数点（dot）,有点象 MS Office 的格式刷)
7. :%!nl 在所有非空行前加入行号 
   :%!nl -ba 在所有行前加入行号(利用 Linux 命令 nl 来实现的)
8. Ctrl-g 显示当前编辑文件名及行数
9. Ctrl-p 自动补全(在编写代码的时候非常有用.比如，输入 prin 后按 Ctrl-p 将自动帮你输入 printf 函数名后面的部分，同时将相关备选函数在底下列出来.)
</code></pre><h3 id="文本搜索与替换"><a href="#文本搜索与替换" class="headerlink" title="文本搜索与替换"></a>文本搜索与替换</h3><p>Vi/Vim 用于文本搜索的主要有下面的三个基本命令：</p>
<pre><code>1. / 在文件中向前搜索(可配合操作数使用，比如 3/str 向前搜索字串 str 并将光标移到第三个找到的串)
2. ? 在文件中向后搜索
3. n 搜索下一个 N 反向搜索下一个
</code></pre><p>除这三个基本命令之外，还有以下三个非常有效快捷的与搜索查找有关的命令：</p>
<pre><code>1. * 在文件中向前搜索当前光标所在的单词
   # 在文件中向后搜索当前光标所在的单词
2. q/ 显示搜索命令历史的窗口, q? 显示搜索命令历史的窗口
</code></pre><p>关于替换主是要结合搜索使用行命令来实现，命令格式为：</p>
<pre><code>:m,ns/str1/str2/g 将 m 行到 n 行中的字串 str1 全部替换为字串 str2。
在众多使用正则表达式进行替换的命令中，平时需要掌握的一个命令是如何快速去除 ^M 字符。
在 Vi/Vim 中使用替换命令 :1,$s/^M//g即可以很容易地快速去掉 ^M 字符。这里需要注意的是 ^M 是使用 Ctrl-v、Ctrl-m 输入的。
</code></pre><h3 id="Vi-Vim-设置"><a href="#Vi-Vim-设置" class="headerlink" title="Vi/Vim 设置"></a>Vi/Vim 设置</h3><pre><code>1. 设置行号显示与否
   :set number 显示行号
   :set no number 取消行号显示
   命令的简写形式：
   :set nu 
   :set no nu
2. 设置自动缩进 
   :set autoindent 设置自动缩进 
   :set no autoindent 取消自动缩进设置
   命令的简写形式：
   :set ai 
   :set no ai
3. 设置缩进宽度 :set shiftwidth=4 设置缩进宽度为 4 
   命令的简写形式：
   :set sw=4
</code></pre><h3 id="用Vim写代码"><a href="#用Vim写代码" class="headerlink" title="用Vim写代码"></a>用Vim写代码</h3><ul>
<li>]p：和 p 的功能差不多，但是它会自动调整被粘贴的文本的缩进去适应当前代码的位置。试一下！</li>
<li>%：匹配花括号、方括号、括号等。在一个括号的上面，然后按 %，鼠标就会出现在匹配的另外一半括号处。</li>
<li><blockquote>
<blockquote>
<p>：缩进所有选择的代码</p>
</blockquote>
</blockquote>
</li>
<li>&lt;&lt;：和上面类似，但是反缩进</li>
<li>gd：到达光标所在处函数或者变量的定义处。</li>
<li>K：在 Man 里面查找光标当前所在处的词。</li>
</ul>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>vim 编辑器是一个极其强大的工具，本文提供了一些技巧和诀窍，希望能够帮助您更高效地编辑文件。请记住，vim 还有更多不太为人所知的特性。</p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      how to use linux quickly
    
    </summary>
    
    
      <category term="linux" scheme="https://t1ger.github.io/tags/linux/"/>
    
      <category term="vim" scheme="https://t1ger.github.io/tags/vim/"/>
    
  </entry>
  
</feed>
