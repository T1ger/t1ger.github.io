<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>t1ger的茶馆</title>
  <subtitle>头顶有光终是幻，足下生云未是仙</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://t1ger.github.io/"/>
  <updated>2017-08-22T09:51:04.373Z</updated>
  <id>https://t1ger.github.io/</id>
  
  <author>
    <name>t1ger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go基础06 循环</title>
    <link href="https://t1ger.github.io/2017/08/22/Go%E5%9F%BA%E7%A1%8006-%E5%BE%AA%E7%8E%AF/"/>
    <id>https://t1ger.github.io/2017/08/22/Go基础06-循环/</id>
    <published>2017-08-22T10:23:37.000Z</published>
    <updated>2017-08-22T09:51:04.373Z</updated>
    
    <content type="html"><![CDATA[<p>循环用于重复执行一些程序块。</p>
<ul>
<li><p>for循环<br>for循环需要预先设定好循环的次数(n)，然后执行隶属于for的语句n次。<br>基本构造是<br>for init; condition; post { }<br>for condition { }<br>for { }<br>举例来说，我们编辑一个叫forDemo.py的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for a:=0; a&lt; 10; a++ &#123;</div><div class="line">        fmt.Println(&quot;a value is: %d&quot;, a)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>无限循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for true &#123;</div><div class="line">        fmt.Println(&quot;this is for loop&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>中断循环<br>continue   // 在循环的某一次执行中，如果遇到continue, 那么跳过这一次执行，进行下一次的操作<br>break      // 停止执行整个循环<br>goto       //将控制转移到被标记的语句,这里不做过多介绍</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for a:=0; a&lt; 10; a++ &#123;</div><div class="line">        if a == 2 &#123;</div><div class="line">            continue</div><div class="line">        &#125;</div><div class="line">    fmt.Println(&quot;a value is: %d&quot;, a)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  当循环执行到i = 2的时候，if条件成立，触发continue, 跳过本次执行(不执行print)，继续进行下一次执行(i = 3)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for a:=0; a&lt; 10; a++ &#123;</div><div class="line">        if a == 2 &#123;</div><div class="line">            break</div><div class="line">        &#125;</div><div class="line">        fmt.Println(&quot;a value is: %d&quot;, a)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  当循环执行到i = 2的时候，if条件成立，触发break, 整个循环停止。</p>
</li>
<li><p>总结<br>for循环<br>break<br>continue</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环用于重复执行一些程序块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;for循环&lt;br&gt;for循环需要预先设定好循环的次数(n)，然后执行隶属于for的语句n次。&lt;br&gt;基本构造是&lt;br&gt;for init; condition; post { }&lt;br&gt;for condition 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础05 条件</title>
    <link href="https://t1ger.github.io/2017/08/22/Go%E5%9F%BA%E7%A1%8005-%E6%9D%A1%E4%BB%B6/"/>
    <id>https://t1ger.github.io/2017/08/22/Go基础05-条件/</id>
    <published>2017-08-22T08:38:14.000Z</published>
    <updated>2017-08-22T09:22:24.089Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>if语句<br>写一个完整的程序,命名为ifDemo.go.这个程序用于实现if结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var  x, i int = 1, 1</div><div class="line">    if i &gt; 0 &#123;</div><div class="line">        fmt.Println(&quot;x=%d &quot;,x+1)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  复杂一些的if</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package main </div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var i int = 1       </div><div class="line">        if i&gt;0 &#123;</div><div class="line">            fmt.Println(&quot;positive i&quot;)</div><div class="line">                i++</div><div class="line">        &#125;else if i == 0 &#123;</div><div class="line">            fmt.Println(&quot;i is 0&quot;)</div><div class="line">                i = i*10</div><div class="line">        &#125;else &#123;</div><div class="line">            fmt.Println(&quot;negative i&quot;)</div><div class="line">                i--</div><div class="line">        &#125;</div><div class="line">        fmt.Println(&quot;new i: &quot;, i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这里有三个块,分别属于if, else if, else 程序根据条件，只执行三个分支中的一个</p>
<p>  整个if可以放在另一个if语句中，也就是if结构的嵌套使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var i int = 5</div><div class="line">	if i &gt; 1 &#123;</div><div class="line">	    fmt.Println(&quot;i bigger than 1&quot;)</div><div class="line">		fmt.Println(&quot;good&quot;)</div><div class="line">		if i &gt;2 &#123;</div><div class="line">		    fmt.Println(&quot;i bigger than 2&quot;)</div><div class="line">			fmt.Println(&quot;even better&quot;)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>switch语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var i int = 4</div><div class="line">    switch i &#123;</div><div class="line">        case 5: </div><div class="line">            fmt.Println(&quot;better&quot;)</div><div class="line">        case 3: </div><div class="line">            fmt.Println(&quot;good&quot;)</div><div class="line">        case 2:</div><div class="line">            fmt.Println(&quot;not bad&quot;)</div><div class="line">        default:</div><div class="line">            fmt.Println(&quot;bad&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>select语句<br>select 的代码形式和 switch 非常相似，不过 select 的 case 里的操作语句只能是[IO 操作]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var c1, c2, c3 chan int</div><div class="line">    var a, b int</div><div class="line">    select &#123;</div><div class="line">        case a = &lt;-c1: </div><div class="line">            fmt.Println(&quot;receive %v from c1&quot;, a)</div><div class="line">        case c2 &lt;- b: </div><div class="line">            fmt.Println(&quot;send %v to c2&quot;, b)</div><div class="line">        default:</div><div class="line">            fmt.Println(&quot;not ready&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  代码执行到 select 时，case 语句会按照源代码的顺序被评估，且只评估一次，评估的结果会出现下面这几种情况<br>除 default 外，如果只有一个 case 语句评估通过，那么就执行这个case里的语句；<br>除 default 外，如果有多个 case 语句评估通过，那么通过伪随机的方式随机选一个；<br>如果 default 外的 case 语句都没有通过评估，那么执行 default 里的语句；<br>如果没有 default，那么 代码块会被阻塞，指导有一个 case 通过评估；否则一直阻塞<br>如果 case 语句中 的 receive 操作的对象是 nil channel，那么也会阻塞</p>
</li>
<li><p>总结<br>if 语句由一个布尔表达式后紧跟一个或多个语句组成,可以在 if 或 else if 语句中嵌入一个或多个 if 或 else if 语句<br>switch 语句用于基于不同条件执行不同动作。<br>select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行.如果 case 语句中 的 receive 操作的对象是 nil channel，那么也会阻塞</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;if语句&lt;br&gt;写一个完整的程序,命名为ifDemo.go.这个程序用于实现if结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础04 运算</title>
    <link href="https://t1ger.github.io/2017/08/22/Go%E5%9F%BA%E7%A1%8004-%E8%BF%90%E7%AE%97/"/>
    <id>https://t1ger.github.io/2017/08/22/Go基础04-运算/</id>
    <published>2017-08-22T07:57:40.000Z</published>
    <updated>2017-08-22T07:36:00.426Z</updated>
    
    <content type="html"><![CDATA[<p>Go的运算符和其他语言类似</p>
<p>（我们暂时只了解这些运算符的基本用法，方便我们展开后面的内容，高级应用暂时不介绍）</p>
<ul>
<li><p>数学运算</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var a int = 21</div><div class="line">	var b int = 10</div><div class="line">	var c int</div><div class="line">	</div><div class="line">	c= a + b</div><div class="line">	fmt.Println(&quot;a+b=%d &quot;,c)</div><div class="line">	c= a - b</div><div class="line">	fmt.Println(&quot;a-b=%d &quot;,c)</div><div class="line">	c= a * b</div><div class="line">	fmt.Println(&quot;a*b=%d &quot;,c)</div><div class="line">	c= a / b</div><div class="line">	fmt.Println(&quot;a/b=%d &quot;,c)</div><div class="line">        c = a % b</div><div class="line">	fmt.Println(&quot;a%b=%d &quot;,c)</div><div class="line">        a++</div><div class="line">	fmt.Println(&quot;a++=%d &quot;,a)</div><div class="line">	a--</div><div class="line">	fmt.Println(&quot;a++=%d &quot;,a)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var a int = 21</div><div class="line">    var b int = 10</div><div class="line">    fmt.Println(&quot;a==b is&quot;, a==b)</div><div class="line">    fmt.Println(&quot;a!=b is&quot;, a!=b)</div><div class="line">    fmt.Println(&quot;a&lt;b is&quot;, a&lt;b)</div><div class="line">    fmt.Println(&quot;a&lt;=b is&quot;, a&lt;=b)</div><div class="line">    fmt.Println(&quot;a&gt;b is&quot;, a&gt;b)</div><div class="line">    fmt.Println(&quot;a&gt;=b is&quot;, a&gt;=b)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var a bool = true</div><div class="line">    var b bool = false     </div><div class="line">    fmt.Println(&quot;a&amp;&amp;b is&quot;, a&amp;&amp;b)</div><div class="line">    fmt.Println(&quot;a||b is&quot;, a||b)</div><div class="line">    fmt.Println(&quot;!(a&amp;&amp;b) is&quot;, !(a&amp;&amp;b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>总结<br>数学 +, - , *, /, %, ++, –<br>判断 ==, !=, &gt;, &gt;=, &lt;, &lt;=<br>逻辑 &amp;&amp;, ||, !</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go的运算符和其他语言类似&lt;/p&gt;
&lt;p&gt;（我们暂时只了解这些运算符的基本用法，方便我们展开后面的内容，高级应用暂时不介绍）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数学运算&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础03数组和切片</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%9F%BA%E7%A1%8003%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/"/>
    <id>https://t1ger.github.io/2017/08/21/Go基础03数组和切片/</id>
    <published>2017-08-21T10:54:54.000Z</published>
    <updated>2017-08-22T06:56:32.329Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>数组<br>数组是一系列同一类型数据的集合.数组中包含的每个元素被称为数组元素,一个数组包含的元素个数称为数组的长度.数组长度在定义后就不能更改.<br>go数组的定义:<br>[32]byte<br>[2<em>N] struct {x, y int 32}<br>[1000]</em>float64<br>[3][5]int<br>[2][2][2]float64<br>go数组初始化:<br>初始化数组中 {} 中的元素个数不能大于 [] 中的数字<br>var balance = [5]float32{999.9, 3.0, 5.8, 8.9, 3.9}<br>如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：<br>var balance = […]float32{999.9, 3.0, 5.8, 8.9, 3.9}<br>go数组的完整操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var n [10]int  // n 是一个长度为10的数组</div><div class="line">	var i,j int</div><div class="line">	</div><div class="line">	// 初始化数组元素</div><div class="line">	for i=0;i&lt;10;i++&#123;</div><div class="line">	    n[i]=i+100</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">	//输出每个数组元素的值</div><div class="line">	for j=0;j&lt;10;j++ &#123;</div><div class="line">	    fmt.Printf(&quot;Element[%d] = %d\n&quot;, j, n[j] )</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>切片<br>切片是对数组的抽象,是在数组之上进行的一层封装,切片的长度不固定,可以追加元素.切片的容量即隐藏数组的长度。长度可变指的是在数组长度的范围内可变<br>go切片的定义:<br>var slice1 []type<br>var slice1 []type = make([]type, len)<br>slice1 := make([]type, len)<br>slice1 := make([]type, len, cap)<br>go切片初始化:<br>s := []int{1, 2, 3} //直接初始化切片，[]表示是切片类型，{1,2,3}初始化值依次是1,2,3.其cap=len=3<br>s := arr[:]  //初始化切片s,是数组arr的引用<br>s := arr[startIndex:endIndex] //将arr中从下标startIndex到endIndex-1 下的元素创建为一个新的切片<br>s := arr[startIndex:] //缺省endIndex时将表示一直到arr的最后一个元素<br>s := arr[:endIndex]  //缺省startIndex时将表示从arr的第一个元素开始<br>s1 := s[startIndex:endIndex] //通过切片s初始化切片s1<br>s :=make([]int,len,cap)  //通过内置函数make()初始化切片s,[]int 标识为其元素类型为int的切片<br>创建数组切片:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">   </div><div class="line">	var myArray [10]int = [10]int&#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;  //定义一个数组</div><div class="line">	var mySlice []int = myArray[:5]</div><div class="line">	var mySlice1 []int  //一个切片在未初始化之前默认为 nil，长度为 0</div><div class="line">	</div><div class="line">	fmt.Println(&quot;Elements of myArray: &quot;)</div><div class="line">	for _,v := range myArray&#123;</div><div class="line">	    fmt.Print(v, &quot; &quot;)</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	fmt.Println(&quot;\nElements of mySlice: &quot;)</div><div class="line">	</div><div class="line">	//元素遍历</div><div class="line">	for _, v := range mySlice &#123;</div><div class="line">	    fmt.Print(v, &quot; &quot;)</div><div class="line">	&#125;</div><div class="line">	fmt.Println()</div><div class="line">	</div><div class="line">	//动态增加	</div><div class="line">	mySlice = append(mySlice, 1, 2, 3)</div><div class="line">	fmt.Println(mySlice)</div><div class="line">	</div><div class="line">	//内容复制</div><div class="line">	copy(mySlice, mySlice1)</div><div class="line">	fmt.Println(mySlice1)</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  关于动态追加,需要注意,如果定义 mySlice2 = []int{8, 9, 10} ,需要 mySlice = append(mySlice, mySlice2…)<br>mySlice2后的三个点表示把mySlice2包含的元素打散后传入,等同于 mySlice = append(mySlice, 7, 8, 9)</p>
</li>
<li><p>总结<br>数组定长,定义后不可更改.切片的长度不固定<br>数组的定义 初始化 遍历<br>切片的定义 初始化 遍历 增加 复制,空切片初始化之前默认为nil,长度为0</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组&lt;br&gt;数组是一系列同一类型数据的集合.数组中包含的每个元素被称为数组元素,一个数组包含的元素个数称为数组的长度.数组长度在定义后就不能更改.&lt;br&gt;go数组的定义:&lt;br&gt;[32]byte&lt;br&gt;[2&lt;em&gt;N] struct {x, y int 3
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础02基本数据类型</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%9F%BA%E7%A1%8002%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://t1ger.github.io/2017/08/21/Go基础02基本数据类型/</id>
    <published>2017-08-21T08:58:39.000Z</published>
    <updated>2017-08-21T09:41:07.810Z</updated>
    
    <content type="html"><![CDATA[<p>简单的数据类型以及赋值</p>
<ul>
<li><p>声明变量<br>var a int<br>var a string<br>var a [10]int    //array<br>var a []int      //slice<br>var a struct {<br>  f int<br>}<br>var a *int    //pointer<br>var a map[string]int //map,key is string type<br>var a func(b int) int<br>var (<br>  a int<br>  b string<br>)</p>
</li>
<li><p>基本数据类型<br>先看内置类型<br>int/uint   //int8、 byte、 int16、 int、 uint、 uintptr<br>float      //float32 、 float64<br>string<br>bool<br>rune       //int32别名,表示unicode的字符<br>error<br>复合类型<br>slice, map, chan<br>interface<br>func<br>array<br>以上是最常用的数据类型。此外还有以下类型，有兴趣的可以学习一下<br>complex   //复数类型<br>byte      //uint8别名<br>uintptr   //指针用的类型<br>下面是基本数据类型的赋值<br>var a int =10<br>var a float =1.3<br>var a bool =True<br>var a string =”Hello”<br>一般情况下,值类型默认为0, bool默认为false, string为空串<br>如何判断自己的类型呢? 可以尝试下每个类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">        &quot;fmt&quot;</div><div class="line">        &quot;reflect&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">        var a float32 = 1.3</div><div class="line">        fmt.Println(&quot;type:&quot;, reflect.TypeOf(a))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>总结<br>变量需要声明才能使用<br>内置类型和复合类型<br>整形, 浮点数, 布尔, 字符串</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的数据类型以及赋值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;声明变量&lt;br&gt;var a int&lt;br&gt;var a string&lt;br&gt;var a [10]int    //array&lt;br&gt;var a []int      //slice&lt;br&gt;var a struct {&lt;b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础01 Hello World</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%9F%BA%E7%A1%8001-Hello-World/"/>
    <id>https://t1ger.github.io/2017/08/21/Go基础01-Hello-World/</id>
    <published>2017-08-21T08:23:03.000Z</published>
    <updated>2017-08-21T07:59:37.674Z</updated>
    
    <content type="html"><![CDATA[<p>简单的‘Hello World!’</p>
<ul>
<li>go命令行<br>假设你已经安装好了go, 那么在Linux命令行输入:<br>[tiger@bogon go]$ go version<br>go version go1.8.3 linux/amd64</li>
</ul>
<ul>
<li><p>写一段小程序<br>用文本编辑器写一个.go结尾的文件，比如说hello.go<br>在hello.go中写入如下，并保存:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[tiger@bogon go]$ cat hello.go </div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    fmt.Println(&quot;Hello, world. 你好, 世界! &quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  退出文本编辑器，然后在命令行输入:<br>$go run hello.go<br>来运行hello.go。可以看到go随后输出<br>Hello, world. 你好, 世界!</p>
</li>
<li><p>编译后执行<br>我们还可以将hello.go编译后在运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[tiger@bogon go]# go build hello.go </div><div class="line">[tiger@bogon go]# ls</div><div class="line">hello  hello.go</div><div class="line">[tiger@bogon go]# ./hello </div><div class="line">Hello, world. 你好, 世界!</div></pre></td></tr></table></figure>
</li>
<li><p>总结<br>fmt.Println()<br>直接运行: go run hello.go<br>编译后运行: go build hello.go 之后在运行</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的‘Hello World!’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go命令行&lt;br&gt;假设你已经安装好了go, 那么在Linux命令行输入:&lt;br&gt;[tiger@bogon go]$ go version&lt;br&gt;go version go1.8.3 linux/amd64&lt;/li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go快速教程(手册)</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B-%E6%89%8B%E5%86%8C/"/>
    <id>https://t1ger.github.io/2017/08/21/Go快速教程-手册/</id>
    <published>2017-08-21T08:17:41.000Z</published>
    <updated>2017-08-21T07:59:15.074Z</updated>
    
    <content type="html"><![CDATA[<p>说明</p>
<ol>
<li>教程将专注于go基础，语法基于go1.8 , 测试环境为Linux</li>
<li>我将专注于go的主干，以便读者能以最快时间对go形成概念</li>
<li>Linux命令行将以 $ 开始，比如 $ls</li>
<li>单行注释会以 // 开始,多行均已以 /* 开头，并以 */ 结尾</li>
</ol>
<p>建议</p>
<ol>
<li>将教程中的命令敲到go中看看效果</li>
<li>你可以在了解之后立即去查看相关更完备的内容 (比如查阅官方文档)</li>
</ol>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;教程将专注于go基础，语法基于go1.8 , 测试环境为Linux&lt;/li&gt;
&lt;li&gt;我将专注于go的主干，以便读者能以最快时间对go形成概念&lt;/li&gt;
&lt;li&gt;Linux命令行将以 $ 开始，比如 $ls&lt;/li&gt;
&lt;li&gt;单行注释会以 /
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>how to use docker in windows</title>
    <link href="https://t1ger.github.io/2017/08/16/how-to-use-docker-in-windows/"/>
    <id>https://t1ger.github.io/2017/08/16/how-to-use-docker-in-windows/</id>
    <published>2017-08-16T03:06:29.000Z</published>
    <updated>2017-08-16T05:20:04.127Z</updated>
    
    <content type="html"><![CDATA[<p>前言<br>本文运行环境针对Windows 10操作系统,主要解决的痛点是各种平台开发环境的不统一以及多版本共存的问题.主要讲解如何安装docker和使用内网registry</p>
<p>在windows环境下,如何安装docker呢? Docker Toolbox 是一个不错的选择,你可以在Mac或者Windows上像安装其它应用一样来安装它.<br>下载点击<a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">这里</a></p>
<h5 id="Docker-Toolbox-安装"><a href="#Docker-Toolbox-安装" class="headerlink" title="Docker Toolbox 安装"></a><b>Docker Toolbox 安装</b></h5><p>默认安装完成后,安装目录结构如下<br> boot2docker.iso<br> docker-compose.exe<br> docker-machine.exe<br> docker-quickstart-terminal.ico<br> docker.exe<br> installers<br> kitematic<br> start.sh<br> unins000.dat<br> unins000.exe</p>
<p>未避免因为墙无法下载问题,我们手动将boot2docker.iso文件拷贝到C:\Users\用户名.docker\machine\cache目录下</p>
<p>现在有两种启动方式,一个是图形启动,一个是命令行方式启动.<br>图形启动的就双击Kitematic<br>命令行启动就双击docker-quickstart-terminal</p>
<p>备注:非administrator用户,请右键-以管理员身份运行,运行如下</p>
<p>命令行启动如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">Running pre-create checks...</div><div class="line">Creating machine...</div><div class="line">(default) Copying C:\Users\abc\.docker\machine\cache\boot2docker.iso to C:\Users\abc\.docker\machine\machines\default\boot2docker.iso...</div><div class="line">(default) Creating VirtualBox VM...</div><div class="line">(default) Creating SSH key...</div><div class="line">(default) Starting the VM...</div><div class="line">(default) Check network to re-create if needed...</div><div class="line">(default) Windows might ask for the permission to create a network adapter. Sometimes, such confirmation window is minimized in the taskbar.</div><div class="line">(default) Found a new host-only adapter: &quot;VirtualBox Host-Only Ethernet Adapter #2&quot;</div><div class="line">(default) Windows might ask for the permission to configure a network adapter. Sometimes, such confirmation window is minimized in the taskbar.</div><div class="line">(default) Windows might ask for the permission to configure a dhcp server. Sometimes, such confirmation window is minimized in the taskbar.</div><div class="line">(default) Waiting for an IP...</div><div class="line">Waiting for machine to be running, this may take a few minutes...</div><div class="line">Detecting operating system of created instance...</div><div class="line">Waiting for SSH to be available...</div><div class="line">Detecting the provisioner...</div><div class="line">Provisioning with boot2docker...</div><div class="line">Copying certs to the local machine directory...</div><div class="line">Copying certs to the remote machine...</div><div class="line">Setting Docker configuration on the remote daemon...</div><div class="line">Checking connection to Docker...</div><div class="line">Docker is up and running!</div><div class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: C:\Program Files\Docker Toolbox\docker-machine.exe env default</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">                        ##         .</div><div class="line">                  ## ## ##        ==</div><div class="line">               ## ## ## ## ##    ===</div><div class="line">           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\___/ ===</div><div class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</div><div class="line">           \______ o           __/</div><div class="line">             \    \         __/</div><div class="line">              \____\_______/</div><div class="line"></div><div class="line">docker is configured to use the default machine with IP 192.168.99.100</div><div class="line">For help getting started, check out the docs at https://docs.docker.com</div><div class="line"></div><div class="line">Start interactive shell</div></pre></td></tr></table></figure></p>
<p>到这里我们就安装完了,查看下docker版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">$ docker info</div><div class="line">Containers: 1</div><div class="line"> Running: 1</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 0</div><div class="line">Images: 1</div><div class="line">Server Version: 17.06.0-ce</div><div class="line">Storage Driver: aufs</div><div class="line"> Root Dir: /mnt/sda1/var/lib/docker/aufs</div><div class="line"> Backing Filesystem: extfs</div><div class="line"> Dirs: 16</div><div class="line"> Dirperm1 Supported: true</div><div class="line">Logging Driver: json-file</div><div class="line">Cgroup Driver: cgroupfs</div><div class="line">Plugins:</div><div class="line"> Volume: local</div><div class="line"> Network: bridge host macvlan null overlay</div><div class="line"> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog</div><div class="line">Swarm: inactive</div><div class="line">Runtimes: runc</div><div class="line">Default Runtime: runc</div><div class="line">Init Binary: docker-init</div><div class="line">containerd version: cfb82a876ecc11b5ca0977d1733adbe58599088a</div><div class="line">runc version: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4</div><div class="line">init version: 949e6fa</div><div class="line">Security Options:</div><div class="line"> seccomp</div><div class="line">  Profile: default</div><div class="line">Kernel Version: 4.4.74-boot2docker</div><div class="line">Operating System: Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017</div><div class="line">OSType: linux</div><div class="line">Architecture: x86_64</div><div class="line">CPUs: 1</div><div class="line">Total Memory: 995.8MiB</div><div class="line">Name: default</div><div class="line">ID: G6PB:FV47:YOTF:CIHJ:GNUB:DTML:7GQ2:6GOO:5WIK:EB3J:J4WR:2DVZ</div><div class="line">Docker Root Dir: /mnt/sda1/var/lib/docker</div><div class="line">Debug Mode (client): false</div><div class="line">Debug Mode (server): true</div><div class="line"> File Descriptors: 41</div><div class="line"> Goroutines: 50</div><div class="line"> System Time: 2017-08-14T08:10:46.381858948Z</div><div class="line"> EventsListeners: 1</div><div class="line">Registry: https://index.docker.io/v1/</div><div class="line">Labels:</div><div class="line"> provider=virtualbox</div><div class="line">Experimental: false</div><div class="line">Insecure Registries:</div><div class="line"> 127.0.0.0/8</div><div class="line">Live Restore Enabled: false</div></pre></td></tr></table></figure></p>
<p>图形启动的话,会让我们登录到 Docker Hub。如果我们还没有账户或者还不想登录，可以点击 SKIP FOR NOW 继续后面的步骤.<br>完成之后，就会出现 Kitematic 应用程序的第一个界面.<br>在这里,我们会看到hello-world-nginx,如果找不到,可以在搜索区域搜索hello world nginx,我们点击 Create 来部署容器,在镜像下载完成之后,它会自动部署.我们可以在 Kitematic界面上预览web页面</p>
<h5 id="主机与docker主机共享文件夹"><a href="#主机与docker主机共享文件夹" class="headerlink" title="主机与docker主机共享文件夹"></a><b>主机与docker主机共享文件夹</b></h5><p>假设我们需要共享的work文件夹,我们需要打开Oracle VM VirtualBox，选中“正在运行”状态的 default 虚拟机，进入 设置-&gt; 共享文件夹，添加共享文件夹，选中work文件夹，勾选“自动挂载”、“固定分配”，确定.<br>重启完成后,通过终端连接docker主机,输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">$ docker-machine.exe ssh default</div><div class="line">                        ##         .</div><div class="line">                  ## ## ##        ==</div><div class="line">               ## ## ## ## ##    ===</div><div class="line">           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\___/ ===</div><div class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</div><div class="line">           \______ o           __/</div><div class="line">             \    \         __/</div><div class="line">              \____\_______/</div><div class="line"> _                 _   ____     _            _</div><div class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</div><div class="line">| &apos;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &apos;__|</div><div class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</div><div class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</div><div class="line">Boot2Docker version 17.06.0-ce, build HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017</div><div class="line">Docker version 17.06.0-ce, build 02c1d87</div><div class="line">docker@default:~$ mount</div><div class="line">tmpfs on / type tmpfs (rw,relatime,size=917692k)</div><div class="line">proc on /proc type proc (rw,relatime)</div><div class="line">sysfs on /sys type sysfs (rw,relatime)</div><div class="line">devpts on /dev/pts type devpts (rw,relatime,mode=600,ptmxmode=000)</div><div class="line">tmpfs on /dev/shm type tmpfs (rw,relatime)</div><div class="line">fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)</div><div class="line">/dev/sda1 on /mnt/sda1 type ext4 (rw,relatime,data=ordered)</div><div class="line">cgroup on /sys/fs/cgroup type tmpfs (rw,relatime,mode=755)</div><div class="line">cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,relatime,cpuset)</div><div class="line">cgroup on /sys/fs/cgroup/cpu type cgroup (rw,relatime,cpu)</div><div class="line">cgroup on /sys/fs/cgroup/cpuacct type cgroup (rw,relatime,cpuacct)</div><div class="line">cgroup on /sys/fs/cgroup/blkio type cgroup (rw,relatime,blkio)</div><div class="line">cgroup on /sys/fs/cgroup/memory type cgroup (rw,relatime,memory)</div><div class="line">cgroup on /sys/fs/cgroup/devices type cgroup (rw,relatime,devices)</div><div class="line">cgroup on /sys/fs/cgroup/freezer type cgroup (rw,relatime,freezer)</div><div class="line">cgroup on /sys/fs/cgroup/net_cls type cgroup (rw,relatime,net_cls)</div><div class="line">cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,relatime,perf_event)</div><div class="line">cgroup on /sys/fs/cgroup/net_prio type cgroup (rw,relatime,net_prio)</div><div class="line">cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,relatime,hugetlb)</div><div class="line">cgroup on /sys/fs/cgroup/pids type cgroup (rw,relatime,pids)</div><div class="line">c/Users on /c/Users type vboxsf (rw,nodev,relatime)</div><div class="line">work on /work type vboxsf (rw,nodev,relatime)</div><div class="line">/dev/sda1 on /mnt/sda1/var/lib/docker/aufs type ext4 (rw,relatime,data=ordered)</div></pre></td></tr></table></figure></p>
<p>可以看到配置共享文件夹work成功.</p>
<h5 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a><b>创建容器<b></b></b></h5><p>在终端下输入以下命令,表示安装最新版本node的linux系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull node</div></pre></td></tr></table></figure></p>
<p>之后就可以通过使用该镜像生成容器了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#查看镜像</div><div class="line">docker images</div><div class="line">#生成容器</div><div class="line">docker run -d -p 3000:3000 node</div></pre></td></tr></table></figure></p>
<h5 id="定制开发环境"><a href="#定制开发环境" class="headerlink" title="定制开发环境"></a><b>定制开发环境</b></h5><p>这里有两种方法,一个是编写Dockerfile 发布到版本库,其他人从版本库下载本地编译;另一种是打包代码到镜像,上传到仓库,其他人从仓库下载运行.</p>
<p>假如我们的发布目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# tree</div><div class="line">.</div><div class="line">├── Dockerfile</div><div class="line">├── index.js</div><div class="line">└── package.json</div></pre></td></tr></table></figure></p>
<p>第一种方法就不多说了,这里我们来看下第二种方法,比如要发布nodejs应用,首先是要编写Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">FROM centos:centos6</div><div class="line">MAINTAINER WeiShao Project &lt;tiger@whistle.com.cn&gt;</div><div class="line">ENV NODEJS_VERSION=v8.3.0</div><div class="line">ENV PATH=/usr/local/node/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin</div><div class="line"></div><div class="line">RUN yum -y update; yum clean all</div><div class="line">RUN yum -y install epel-release; yum clean all</div><div class="line">RUN yum -y install make gcc gcc-c++ &amp;&amp; yum -y clean all</div><div class="line">RUN yum -y install xz</div><div class="line"></div><div class="line">RUN mkdir -p /usr/local &amp;&amp; cd /usr/local &amp;&amp; curl -s -L -O http://cdn.npm.taobao.org/dist/node/$&#123;NODEJS_VERSION&#125;/node-$&#123;NODEJS_VERSION&#125;-linux-x64.tar.xz &amp;&amp; tar xf node-$&#123;NODEJS_VERSION&#125;-linux-x64.tar.xz &amp;&amp; mv node-$&#123;NODEJS_VERSION&#125;-linux-x64 node</div><div class="line"></div><div class="line">RUN npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">RUN cnpm install -g pm2 --registry=https://registry.npm.taobao.org</div><div class="line"></div><div class="line">add . /usr/local/whistle/webapps/src</div><div class="line">RUN cd /usr/local/whistle/webapps/src; npm install</div><div class="line">EXPOSE 3000</div><div class="line"></div><div class="line">CMD [&quot;pm2-docker&quot;, &quot;/usr/local/whistle/webapps/src/index.js&quot;]</div></pre></td></tr></table></figure></p>
<p>我们的index.js和package.json 如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# cat index.js </div><div class="line">var express = require(&apos;express&apos;);</div><div class="line"></div><div class="line">// Constants</div><div class="line">var PORT = 3000;</div><div class="line"></div><div class="line">// App</div><div class="line">var app = express();</div><div class="line">app.get(&apos;/&apos;, function (req, res) &#123;</div><div class="line">  res.send(&apos;Hello World from CentOS6 in Docker\n&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(PORT)</div><div class="line">console.log(&apos;Running on http://localhost:&apos; + PORT);</div><div class="line"></div><div class="line"></div><div class="line">[root@localhost docker-node]# cat package.json </div><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;docker-centos-hello&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</div><div class="line">  &quot;description&quot;: &quot;Node.js Hello World app on CentOS6 using docker, created from the Node.js example on docker.io&quot;,</div><div class="line">  &quot;author&quot;: &quot;Wei Shao &lt;ws@whistle.com.cn&gt;&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;express&quot;: &quot;3.x&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们可以build我们的镜像了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# docker build -t registry.whistle.com.cn/node:8.3.0 .</div></pre></td></tr></table></figure></p>
<p>在等待一会之后就可以看到我们的镜像编译成功了,可以通过docker images查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# docker run -d -p 3000:3000 registry.whistle.com.cn/node:8.3.0</div></pre></td></tr></table></figure></p>
<p>现在通过<a href="http://192.168.99.100:3000/" target="_blank" rel="external">http://192.168.99.100:3000/</a> 就可以查看页面了.</p>
<p>如何才能让其他同事用这个镜像呢,这里我们要上传到自己的使用仓库里去<br>因为我们使用的是自签名证书,所以需要设置insecure-registry,执行以下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">docker-machine ssh default</div><div class="line">sudo vi /var/lib/boot2docker/profile</div><div class="line"></div><div class="line">EXTRA_ARGS=&quot;</div><div class="line">--insecure-registry registry.whistle.com.cn</div><div class="line">&quot;</div><div class="line">exit</div><div class="line">docker-machine restart</div><div class="line"></div><div class="line">or</div><div class="line">docker-machine ssh default &quot;sudo sed -i &apos;/EXTRA_ARGS=/a\--insecure-registry registry.whistle.com.cn&apos; /var/lib/boot2docker/profile&quot;</div><div class="line">docker-machine restart</div></pre></td></tr></table></figure></p>
<p>这样,我们就可以pull我们制作的node镜像了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push registry.whistle.com.cn/node:8.3.0</div></pre></td></tr></table></figure>
<p>可以在浏览器访问 <a href="https://registry.whistle.com.cn/v2/_catalog" target="_blank" rel="external">https://registry.whistle.com.cn/v2/_catalog</a> 查看仓库的镜像列表</p>
<p>其他同事在设置了insecure-registry之后就可以执行以下命令获取相应的镜像了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull registry.whistle.com.cn/node:8.3.0</div></pre></td></tr></table></figure>
<p>FAQ</p>
<ul>
<li>问:运行Kitematic时,卡在waiting for an IP的命令下.<br>答: 检查运行操作系统,win7下运行可能出现此问题,由于没有发布正式版，不推荐win7下使用. win7 下 Docker Quickstart Terminal可以运行正常</li>
<li>问:如何确认当前docker虚拟机状态<br>答: 在命令行里输入 docker-machine ls 查看,如果没有可以通过以下命令建立 docker-machine create –driver=virtualbox default</li>
<li>问: 如何才能自动生成Dockerfile呢<br>答: 可以通过starter来自动生成,还是建议学习下Dockerfile的相关基础知识.自动生成步骤如下<br>wget <a href="https://raw.githubusercontent.com/cloud66/starter/master/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/cloud66/starter/master/install.sh</a><br>chmod +x install.sh &amp;&amp; ./install.sh<br>cd appdir &amp;&amp; starter -g dockerfile,service<br>进行简单选择后即可在当前目录生成dockerfile文件</li>
<li>问: 如何查看registry 和images version<h1 id="curl-https-registry-whistle-com-cn-v2-catalog"><a href="#curl-https-registry-whistle-com-cn-v2-catalog" class="headerlink" title="curl https://registry.whistle.com.cn/v2/_catalog"></a>curl <a href="https://registry.whistle.com.cn/v2/_catalog" target="_blank" rel="external">https://registry.whistle.com.cn/v2/_catalog</a></h1>{“repositories”:[“hello-world”,”jenkins”,”node”,”svn”]} <h1 id="curl-https-registry-whistle-com-cn-v2-node-tag-list"><a href="#curl-https-registry-whistle-com-cn-v2-node-tag-list" class="headerlink" title="curl https://registry.whistle.com.cn/v2/node/tag/list"></a>curl <a href="https://registry.whistle.com.cn/v2/node/tag/list" target="_blank" rel="external">https://registry.whistle.com.cn/v2/node/tag/list</a></h1>{“name”:”node”,”tags”:[“8.3.0”]}</li>
</ul>
<p>ref<br><a href="http://www.cnblogs.com/studyzy/p/6113221.html" target="_blank" rel="external">在Windows中玩转Docker Toolbox</a><br><a href="https://stackoverflow.com/questions/30654306/allow-insecure-registry-in-host-provisioned-with-docker-machine" target="_blank" rel="external">allow insecure registry in host provisioned with docker-machine</a><br><a href="https://accenture.github.io/adop-docker-compose/docs/tools/docker-registry/" target="_blank" rel="external">Tools - Docker Registry</a><br><a href="http://blog.kazaff.me/2016/06/16/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%89docker%E4%BB%93%E5%BA%93/" target="_blank" rel="external">搭建本地私有Docker仓库</a><br><a href="http://www.cnblogs.com/wjoyxt/p/5855405.html" target="_blank" rel="external">Docker私有仓库 Registry中的镜像管理</a></p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言&lt;br&gt;本文运行环境针对Windows 10操作系统,主要解决的痛点是各种平台开发环境的不统一以及多版本共存的问题.主要讲解如何安装docker和使用内网registry&lt;/p&gt;
&lt;p&gt;在windows环境下,如何安装docker呢? Docker Toolbox 是一
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>a simplified command-line interface to VMware vCenter</title>
    <link href="https://t1ger.github.io/2017/08/08/a-simplified-command-line-interface-to-VMware-vCenter/"/>
    <id>https://t1ger.github.io/2017/08/08/a-simplified-command-line-interface-to-VMware-vCenter/</id>
    <published>2017-08-08T07:38:20.000Z</published>
    <updated>2017-08-08T10:03:21.139Z</updated>
    
    <content type="html"><![CDATA[<p>govc allows you to interface with VMware vCenter without the need for the dreaded vClient,Windows machines or to write you own scripts to access the horrible VMware API. This way you can easily automate many tasks on VMware directly from the command line or your bash scripts</p>
<p>by the way ,I don’t like interface with ESX/vCenter,this is so cool tools what I desired</p>
<p>First thing,you can compile it yourself, but there’s  handly binaries already available on the project github page <a href="https://github.com/vmware/govmomi/releases" target="_blank" rel="external">here</a></p>
<p>I downloaded it and created a small wrapper for it:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># curl -LO https://github.com/vmware/govmomi/releases/download/v0.15.0/govc_linux_amd64.gz</div><div class="line"># gunzip govc_linux_amd64.gz</div><div class="line"># cat &gt;govc &lt;&lt;EOF</div><div class="line">#!/bin/bash</div><div class="line"> </div><div class="line">export GOVC_URL=&apos;https://username:password@vsphere-ip-or-hostname/sdk&apos;</div><div class="line">export GOVC_DATACENTER=VSPHERE_DC</div><div class="line">export GOVC_INSECURE=true</div><div class="line"> </div><div class="line">/usr/bin/govc_linux_amd64 \$@</div><div class="line">EOF</div><div class="line"># chmod +x govc*</div><div class="line"># cp -i govc* /usr/bin/</div></pre></td></tr></table></figure></p>
<p>Note that you only need GOVC_INSECURE=true if you are using self-signed certificates and you don’t have CA added to you local trusted certs.</p>
<p>For a start,you can get some basic info about you environment:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@localhost daily]# ./govc about</div><div class="line">Name:         VMware vCenter Server</div><div class="line">Vendor:       VMware, Inc.</div><div class="line">Version:      5.1.0</div><div class="line">Build:        880146</div><div class="line">OS type:      win32-x64</div><div class="line">API type:     VirtualCenter</div><div class="line">API version:  5.1</div><div class="line">Product ID:   vpx</div><div class="line">UUID:         4AC51BFC-DC4E-47D3-A912-B51A1A28BAFA</div><div class="line"></div><div class="line">[root@localhost daily]# ./govc datacenter.info</div><div class="line">Name:                ws_dc01</div><div class="line">  Path:              /ws_dc01</div><div class="line">  Hosts:             5</div><div class="line">  Clusters:          0</div><div class="line">  Virtual Machines:  69</div><div class="line">  Networks:          3</div><div class="line">  Datastores:        10</div><div class="line">Name:                ws_dc02</div><div class="line">  Path:              /ws_dc02</div><div class="line">  Hosts:             5</div><div class="line">  Clusters:          0</div><div class="line">  Virtual Machines:  118</div><div class="line">  Networks:          32</div><div class="line">  Datastores:        5</div></pre></td></tr></table></figure></p>
<p>if you want to get usage about govc,just run govc without any argument. To see what parameters a command supports, run govc command –help </p>
<p>eg,you can easily get some info with one simple command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">[root@localhost daily]# ./govc datastore.info </div><div class="line">Name:        datastore21</div><div class="line">  Path:      /ws_dc01/datastore/datastore21</div><div class="line">  Type:      VMFS</div><div class="line">  URL:       ds:///vmfs/volumes/522460d8-f202b496-a69f-90b11c2afe3d/</div><div class="line">  Capacity:  2508.2 GB</div><div class="line">  Free:      470.2 GB</div><div class="line">Name:        datastore20</div><div class="line">  Path:      /ws_dc02/datastore/datastore20</div><div class="line">  Type:      VMFS</div><div class="line">  URL:       ds:///vmfs/volumes/52778cbb-107633af-7209-90b11c2a9f0f/</div><div class="line">  Capacity:  2508.2 GB</div><div class="line">  Free:      176.5 GB</div><div class="line">  </div><div class="line">[root@localhost daily]# ./govc host.info</div><div class="line">/usr/bin/govc_linux_amd64: default host resolves to multiple instances, please specify</div><div class="line">[root@localhost daily]# ./govc host.info -host.ip=192.168.1.20</div><div class="line">Name:              192.168.1.20</div><div class="line">  Path:            /ws_dc01/host/192.168.1.20/192.168.1.20</div><div class="line">  Manufacturer:    Dell Inc.</div><div class="line">  Logical CPUs:    32 CPUs @ 2599MHz</div><div class="line">  Processor type:  Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz</div><div class="line">  CPU usage:       2703 MHz (3.3%)</div><div class="line">  Memory:          130976MB</div><div class="line">  Memory usage:    92697 MB (-1.2%)</div><div class="line">  Boot time:       2017-06-26 11:09:53.406999 +0000 UTC</div><div class="line"></div><div class="line">  </div><div class="line">[root@localhost daily]# ./govc vm.info  -vm.ip=192.168.1.180</div><div class="line">Name:           ws-180</div><div class="line">  Path:         /ws_dc01/vm/ws-180</div><div class="line">  UUID:         4232a9b7-a1de-e45b-453b-beade5b7935a</div><div class="line">  Guest name:   CentOS 4/5/6 (64-bit)</div><div class="line">  Memory:       4096MB</div><div class="line">  CPU:          8 vCPU(s)</div><div class="line">  Power state:  poweredOn</div><div class="line">  Boot time:    2017-06-26 11:34:54.042422 +0000 UTC</div><div class="line">  IP address:   192.168.1.180</div><div class="line">  Host:         192.168.1.20</div></pre></td></tr></table></figure></p>
<p>If you want to look someting , it good way to use ls command<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@localhost daily]# ./govc ls</div><div class="line">/ws_dc01/vm</div><div class="line">/ws_dc01/network</div><div class="line">/ws_dc01/host</div><div class="line">/ws_dc01/datastore</div><div class="line">[root@localhost daily]# ./govc ls /ws_dc01/vm</div><div class="line">/ws_dc01/vm/elk149</div><div class="line">/ws_dc01/vm/elk148</div><div class="line">/ws_dc01/vm/elk147</div><div class="line">...</div><div class="line"></div><div class="line">[root@localhost daily]# ./govc ls /ws_dc01/host</div><div class="line">/ws_dc01/host/192.168.1.20</div><div class="line">/ws_dc01/host/192.168.1.21</div><div class="line">...</div><div class="line"></div><div class="line">[root@localhost daily]# ./govc ls /ws_dc01/datastore</div><div class="line">/ws_dc01/datastore/datastore21</div><div class="line">/ws_dc01/datastore/datastore20</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>govc also allow you to run esxcli on the specified host, for example in one of my many experiments I ran:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost daily]# ./govc host.esxcli  --host.ip=172.16.56.20 vm process list|grep DisplayName | awk &#123;&apos;print $2&apos;&#125; | sort</div><div class="line">debug140</div><div class="line">debug141</div><div class="line">debug142</div><div class="line">elk147</div><div class="line">elk148</div><div class="line">elk149</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>A very import thing to notice is that every command can be run with the parameters -json=true.This output a machine-parsable format that includes many more details than the normal text output.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@localhost daily]# ./govc ls -json /ws_dc01/datastore/datastore20|python -m json.tool</div><div class="line">&#123;</div><div class="line">    &quot;DeRef&quot;: false,</div><div class="line">    &quot;Dump&quot;: false,</div><div class="line">    &quot;JSON&quot;: true,</div><div class="line">    &quot;Long&quot;: false,</div><div class="line">    &quot;Out&quot;: &#123;&#125;,</div><div class="line">    &quot;TTY&quot;: false,</div><div class="line">    &quot;ToRef&quot;: false,</div><div class="line">    &quot;Type&quot;: &quot;&quot;,</div><div class="line">    &quot;elements&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;Object&quot;: &#123;</div><div class="line">                &quot;AlarmActionsEnabled&quot;: true,</div><div class="line">                &quot;AvailableField&quot;: null,</div><div class="line">                &quot;Browser&quot;: &#123;</div><div class="line">                    &quot;Type&quot;: &quot;HostDatastoreBrowser&quot;,</div><div class="line">                    &quot;Value&quot;: &quot;datastoreBrowser-datastore-514&quot;</div><div class="line">                &#125;,</div><div class="line">                &quot;Capability&quot;: &#123;</div><div class="line">                    &quot;DirectoryHierarchySupported&quot;: true,</div><div class="line">                    &quot;NativeSnapshotSupported&quot;: false,</div><div class="line">                    &quot;PerFileThinProvisioningSupported&quot;: true,</div><div class="line">                    &quot;RawDiskMappingsSupported&quot;: true,</div><div class="line">                    &quot;SeSparseSupported&quot;: null,</div><div class="line">                    &quot;StorageIORMSupported&quot;: true,</div><div class="line">                    &quot;TopLevelDirectoryCreateSupported&quot;: null,</div><div class="line">                    &quot;UpitSupported&quot;: null,</div><div class="line">                    &quot;VmfsSparseSupported&quot;: null,</div><div class="line">                    &quot;VsanSparseSupported&quot;: null</div><div class="line">                &#125;,</div><div class="line">[...]</div></pre></td></tr></table></figure></p>
<p>of course,could be very handy for your scripts!</p>
<p>ref<br><a href="http://www.virtuallyghetto.com/2014/09/govmomi-vsphere-sdk-for-go-govc-cli-kubernetes-on-vsphere-part-1.html" target="_blank" rel="external">govmomi (vSphere SDK for Go), govc CLI &amp; Kubernetes on vSphere</a><br><a href="https://velenux.wordpress.com/2016/09/19/automate-your-vcenter-interactions-from-the-linux-commandline-with-govmomi-and-govc/" target="_blank" rel="external">Automate your vCenter interactions from the Linux commandline with govmomi and govc</a><br><a href="https://dellaert.org/2013/03/04/pysphere-script-to-clone-a-template-into-multiple-vms-with-post-processing/" target="_blank" rel="external">PySphere script to clone a template into multiple VMs with post processing</a><br><a href="https://github.com/tkak/terraform-provider-vsphere" target="_blank" rel="external">terraform-provider-vsphere</a></p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;govc allows you to interface with VMware vCenter without the need for the dreaded vClient,Windows machines or to write you own scripts to
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Prometheus 监控方案</title>
    <link href="https://t1ger.github.io/2017/07/04/Prometheus-%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88/"/>
    <id>https://t1ger.github.io/2017/07/04/Prometheus-监控方案/</id>
    <published>2017-07-04T08:01:05.000Z</published>
    <updated>2017-08-09T08:39:23.181Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Prometheus-安装"><a href="#Prometheus-安装" class="headerlink" title="Prometheus 安装"></a><b>Prometheus 安装</b></h5><p>centos6的安装参考<a href="http://deadline.top/2016/11/16/%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%B9%8BPrometheus/" target="_blank" rel="external">这里</a>,以下以centos7为例介绍:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">sudo yum install pygpgme yum-utils</div><div class="line">#For centos7</div><div class="line">sudo cat &gt; /etc/yum.repos.d/prometheus-rpm_release.repo &lt;&lt; EOF</div><div class="line">[prometheus]</div><div class="line">name=prometheus</div><div class="line">baseurl=https://packagecloud.io/prometheus-rpm/release/el/7/$basearch</div><div class="line">repo_gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://packagecloud.io/prometheus-rpm/release/gpgkey</div><div class="line">       https://raw.githubusercontent.com/lest/prometheus-rpm/master/RPM-GPG-KEY-prometheus-rpm</div><div class="line">gpgcheck=1</div><div class="line">sslverify=1</div><div class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</div><div class="line">metadata_expire=300</div><div class="line">EOF</div><div class="line"></div><div class="line">[root@localhost ~]# yum install prometheus -y</div><div class="line">[root@localhost ~]# prometheus -version</div><div class="line">prometheus, version 1.7.1 (branch: master, revision: 3afb3fffa3a29c3de865e1172fb740442e9d0133)</div><div class="line">  build user:       root@0aa1b7fc430d</div><div class="line">  build date:       20170612-11:44:05</div><div class="line">  go version:       go1.8.3</div><div class="line"></div><div class="line">[root@localhost ~]# systemctl start prometheus</div></pre></td></tr></table></figure></p>
<p>可以通过<a href="http://localhost:9090/metrics访问啦" target="_blank" rel="external">http://localhost:9090/metrics访问啦</a></p>
<h5 id="grafana-安装"><a href="#grafana-安装" class="headerlink" title="grafana 安装"></a><b>grafana 安装</b></h5><p>grafana安装方法参考<a href="http://docs.grafana.org/installation/rpm/" target="_blank" rel="external">这里</a>,这里选择yum安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# sudo yum install https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.3.1-1.x86_64.rpm</div><div class="line">[root@localhost ~]# systemctl start grafana-server.service</div><div class="line">[root@localhost ~]# sudo systemctl enable grafana-server.service</div></pre></td></tr></table></figure></p>
<p>可以通过<a href="http://localhost:3000/metrics访问啦,默认密码admin/admin" target="_blank" rel="external">http://localhost:3000/metrics访问啦,默认密码admin/admin</a><br>如果单独的导入模板,可以忽略以下步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#uncomment config file on /etc/grafana/grafana.ini </div><div class="line">[dashboards.json]</div><div class="line">enabled = true</div><div class="line">path = /var/lib/grafana/dashboards</div><div class="line"></div><div class="line">#install dashboards</div><div class="line">git clone https://github.com/percona/grafana-dashboards.git</div><div class="line">cp -r grafana-dashboards/dashboards /var/lib/grafana/</div><div class="line"></div><div class="line">#Restart Grafana</div><div class="line">systemctl restart grafana-server.service</div></pre></td></tr></table></figure></p>
<p>这里需要注意的是,如果你的grafana数据源名字不是Prometheus,请注意导入数据库模板时重新关联数据源,否则会包模板初始化失败<br>添加数据源和模板参考<a href="https://www.hi-linux.com/posts/25047.html" target="_blank" rel="external">这里</a></p>
<h5 id="Configuring-Prometheus"><a href="#Configuring-Prometheus" class="headerlink" title="Configuring Prometheus"></a><b>Configuring Prometheus</b></h5><ul>
<li><p>linux node监控配置<br>首先,配置好prometheus.repo,如果有防火墙开放9100端口.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#install node_exporter</div><div class="line">[root@localhost ~]# yum install node_exporter -y</div><div class="line">[root@localhost ~]# systemctl start node_exporter</div><div class="line"></div><div class="line">#prometheus server configure,add to /etc/prometheus/prometheus.yml</div><div class="line"></div><div class="line">  - job_name: &apos;linux&apos;</div><div class="line"></div><div class="line">    static_configs:</div><div class="line">      - targets: [&apos;192.168.1.106:9100&apos;]</div><div class="line">        labels:</div><div class="line">          instance: &apos;dev_106&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>mysql node 监控配置,如果有防火墙开放9104端口.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#install mysqld_exporter</div><div class="line">[root@localhost ~]# yum install mysqld_exporter -y</div><div class="line">[root@localhost ~]# systemctl start mysqld-exporter</div><div class="line"></div><div class="line">#prometheus server configure,add to /etc/prometheus/prometheus.yml</div><div class="line"></div><div class="line">  - job_name: &apos;mysql&apos;</div><div class="line"></div><div class="line">    static_configs:</div><div class="line">      - targets: [&apos;192.168.1.106:9104&apos;]</div><div class="line">        labels:</div><div class="line">          instance: &apos;dev_106_db&apos; </div><div class="line"></div><div class="line">#mysqld_exporter需要连接到Mysql，创建用户并赋予所需的权限： </div><div class="line"></div><div class="line">mysql&gt; create user monitor@localhost identified by &apos;monitor&apos; with max_user_connections 3;</div><div class="line">mysql&gt; grant process,replication client,select on *.* to monitor@localhost;</div><div class="line"></div><div class="line">#mysqld_exporter默认会读取~/.my.cnf文件</div><div class="line">#my.cnf file for MySQL exporter should be as follows: </div><div class="line">cat &lt;&lt; EOF &gt; .my.cnf</div><div class="line">[client]</div><div class="line">user=monitor</div><div class="line">password=monitor</div><div class="line">host=192.168.1.106</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
<li><p>网络监控,提供 http、dns、tcp、icmp（ping）的监控,如果有防火墙开放9115端口.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># install blackbox_exporter </div><div class="line">[root@localhost ~]# yum install blackbox_exporter -y</div><div class="line">[root@localhost ~]# systemctl start blackbox_exporter</div></pre></td></tr></table></figure>
<p>  1.Ping 应用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#prometheus server configure,add to /etc/prometheus/prometheus.yml</div><div class="line"></div><div class="line">  - job_name: &apos;ping_all&apos;</div><div class="line">    scrape_interval: 5s</div><div class="line">    metrics_path: /probe</div><div class="line">    params:</div><div class="line">      module: [icmp]  #ping</div><div class="line">    static_configs:</div><div class="line">      - targets: [&apos;219.150.32.132&apos;, &apos;219.148.204.66&apos;]</div><div class="line">        labels:</div><div class="line">          group: &apos;一线城市-电信网络监控&apos;</div><div class="line">      - targets: [&apos;218.8.251.163&apos;, &apos;218.107.51.1&apos;]</div><div class="line">        labels:</div><div class="line">          group: &apos;一线城市-联通网络监控&apos;</div><div class="line">    relabel_configs:</div><div class="line">      - source_labels: [__address__]</div><div class="line">        regex: (.*)(:80)?</div><div class="line">        target_label: __param_target</div><div class="line">        replacement: $&#123;1&#125;</div><div class="line">      - source_labels: [__param_target]</div><div class="line">        regex: (.*)</div><div class="line">        target_label: ping</div><div class="line">        replacement: $&#123;1&#125;</div><div class="line">      - source_labels: []</div><div class="line">        regex: .*</div><div class="line">        target_label: __address__</div><div class="line">        replacement: 127.0.0.1:9115  # Blackbox exporter.</div></pre></td></tr></table></figure>
<p>  在 grafana中增加 Data Sources 选 prometheus,然后按照grafana的文档新定制一个面板<br>ROW中指标选probe_duration_seconds{job=”ping_all”}<br>2.检测ssl 证书失效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#prometheus server configure,add to /etc/prometheus/prometheus.yml</div><div class="line"></div><div class="line">rule_files:</div><div class="line">  - ssl_expiry.rules</div><div class="line">scrape_configs:</div><div class="line">  - job_name: &apos;blackbox&apos;</div><div class="line">    metrics_path: /probe</div><div class="line">    params:</div><div class="line">      module: [http_2xx]  # Look for a HTTP 200 response.</div><div class="line">    static_configs:</div><div class="line">      - targets:</div><div class="line">        - example.com  # Target to probe</div><div class="line">    relabel_configs:</div><div class="line">      - source_labels: [__address__]</div><div class="line">        regex: (.*?)(:80)?</div><div class="line">        target_label: __param_target</div><div class="line">        replacement: https://$&#123;1&#125;</div><div class="line">      - source_labels: [__param_target]</div><div class="line">        target_label: instance</div><div class="line">      - target_label: __address__</div><div class="line">        replacement: 127.0.0.1:9115  # Blackbox exporter.</div><div class="line"></div><div class="line">cat &lt;&lt; &apos;EOF&apos; &gt; ssl_expiry.rules</div><div class="line">ALERT SSLCertExpiringSoon</div><div class="line"> IF probe_ssl_earliest_cert_expiry&#123;job=&quot;blackbox&quot;&#125; - time() &lt; 86400 * 30</div><div class="line"> FOR 10m</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>  可以通过 <a href="http://localhost:9090/alerts访问,失效前30天将收到告警" target="_blank" rel="external">http://localhost:9090/alerts访问,失效前30天将收到告警</a>.</p>
</li>
<li><p>snmp_exporter 监控配置,如果有防火墙开放9116端口.<br>安装snmp_exporter,参考<a href="https://github.com/prometheus/snmp_exporter" target="_blank" rel="external">这里</a>,下面为安装脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">version=v0.4.0</div><div class="line">file=snmp_exporter-0.4.0.linux-amd64</div><div class="line"> </div><div class="line">wget https://github.com/prometheus/snmp_exporter/releases/download/$version/$file.tar.gz \</div><div class="line">  -O /tmp/$file.tar.gz</div><div class="line">cd /tmp</div><div class="line">tar xvf /tmp/$file.tar.gz</div><div class="line">cp /tmp/$file/snmp_exporter /usr/local/bin/snmp_exporter</div><div class="line"> </div><div class="line">tee /usr/lib/systemd/system/snmp_exporter.service &lt;&lt; EOS</div><div class="line">[Unit]</div><div class="line">Description=SNMP Exporter</div><div class="line">[Service]</div><div class="line">ExecStart=/usr/local/bin/snmp_exporter -config.file /etc/prometheus/snmp.yml</div><div class="line">[Install]</div><div class="line">WantedBy=default.target</div><div class="line">EOS</div><div class="line"> </div><div class="line">systemctl daemon-reload</div><div class="line">systemctl enable snmp_exporter</div><div class="line">systemctl start snmp_exporter </div><div class="line">cd -</div></pre></td></tr></table></figure>
<p>  我们可以通过 <a href="http://localhost:9116来验证是否允许,接下来我们进行prometheus配置" target="_blank" rel="external">http://localhost:9116来验证是否允许,接下来我们进行prometheus配置</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#prometheus server configure,add to /etc/prometheus/prometheus.yml	</div><div class="line">	scrape_configs:</div><div class="line">  - job_name: &apos;snmp&apos;</div><div class="line">    static_configs:</div><div class="line">      - targets:</div><div class="line">        - 192.168.1.2  # SNMP device.</div><div class="line">    metrics_path: /snmp</div><div class="line">    params:</div><div class="line">      module: [default]</div><div class="line">    relabel_configs:</div><div class="line">      - source_labels: [__address__]</div><div class="line">        target_label: __param_target</div><div class="line">      - source_labels: [__param_target]</div><div class="line">        target_label: instance</div><div class="line">      - target_label: __address__</div><div class="line">        replacement: 127.0.0.1:9116  # SNMP exporter.</div></pre></td></tr></table></figure>
<p>  稍等一会儿,我们就可以通过 <a href="http://localhost:9090/consoles/snmp.html" target="_blank" rel="external">http://localhost:9090/consoles/snmp.html</a> 查看接口统计</p>
</li>
<li><p>redis_exporter 监控配置,如果有防火墙开放9121端口.<br>安装 redis_exporter ,具体参考<a href="https://github.com/oliver006/redis_exporter" target="_blank" rel="external">这里</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ go get</div><div class="line">$ go build</div><div class="line">$ ./redis_exporter &lt;flags&gt;</div><div class="line"></div><div class="line">#prometheus server configure,add to /etc/prometheus/prometheus.yml</div><div class="line">- job_name: redis_exporter</div><div class="line">  static_configs:</div><div class="line">  - targets: [&apos;localhost:9121&apos;]</div></pre></td></tr></table></figure>
<p>  grafana中模板redis模板参考<a href="https://grafana.com/dashboards/763/revisions" target="_blank" rel="external">这里</a></p>
</li>
<li><p>nginx_exporter 监控配置<br>1.通过nginx-vts-exporter 监控,安装参考<a href="https://www.hi-linux.com/posts/27014.html" target="_blank" rel="external">这里</a>,grafana模板参考<a href="https://grafana.com/dashboards/1623" target="_blank" rel="external">这里</a><br>2.通过nginx-lua-prometheus 监控,安装参考<a href="https://github.com/knyar/nginx-lua-prometheus" target="_blank" rel="external">这里</a>,grafana模板参考<a href="https://grafana.com/dashboards/462" target="_blank" rel="external">这里</a><br>3.通过nginx-exporter 监控,安装参考<a href="https://github.com/discordianfish/nginx_exporter" target="_blank" rel="external">这里</a>,未找到相应grafana模板,不推荐<br>4.监控Nginx流量的扩展程序,安装参考<a href="https://github.com/vovolie/lua-nginx-prometheus" target="_blank" rel="external">这里</a><br>5.通过日志监控,参考<a href="https://github.com/martin-helmich/prometheus-nginxlog-exporter" target="_blank" rel="external">这里</a></p>
</li>
<li><p>ceph_exporter 监控配置<br>1.通过ceph_exporter 监控,安装参考<a href="https://github.com/digitalocean/ceph_exporter" target="_blank" rel="external">这里</a>,grafana模板参考<a href="https://grafana.com/dashboards/917" target="_blank" rel="external">这里</a></p>
</li>
<li><p>gluster_exporter 监控配置<br>1.通过gluster_exporter 监控,安装参考<a href="https://github.com/ofesseler/gluster_exporter" target="_blank" rel="external">这里</a></p>
</li>
<li><p>JMX Exporter 监控配置<br>1.通过JMX Exporter 监控,安装参考<a href="https://github.com/prometheus/jmx_exporter" target="_blank" rel="external">这里</a></p>
</li>
<li><p>Docker 监控配置</p>
</li>
</ul>
<ol>
<li>通过docker-compose安装, 参考<a href="https://github.com/vegasbrianc/prometheus" target="_blank" rel="external">这里</a></li>
<li>通过cadvisor ,参考<a href="https://www.ctl.io/developers/blog/post/monitoring-docker-services-with-prometheus" target="_blank" rel="external">这里</a></li>
</ol>
<p>ref<br><a href="https://prometheus.io/" target="_blank" rel="external">prometheus</a><br><a href="https://www.iamle.com/archives/2130.html" target="_blank" rel="external">用Prometheus进行网络质量ping监控Grafana进行监控数据展示</a><br><a href="https://www.robustperception.io/get-alerted-before-your-ssl-certificates-expire/" target="_blank" rel="external">Get alerted before your SSL certificates expire</a><br><a href="https://github.com/fstab/prometheus-for-java-developers" target="_blank" rel="external">Prometheus Monitoring for Java Developers</a><br><a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="external">EXPORTERS AND INTEGRATIONS</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-add-a-prometheus-dashboard-to-grafana" target="_blank" rel="external">How To Add a Prometheus Dashboard to Grafana</a><br><a href="http://www.cnblogs.com/vovlie/p/Nginx_monitoring.html" target="_blank" rel="external">Prometheus 监控 Nginx 流量</a><br><a href="https://github.com/martin-helmich/prometheus-nginxlog-exporter" target="_blank" rel="external">NGINX Performance Metrics with Prometheus</a></p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Prometheus-安装&quot;&gt;&lt;a href=&quot;#Prometheus-安装&quot; class=&quot;headerlink&quot; title=&quot;Prometheus 安装&quot;&gt;&lt;/a&gt;&lt;b&gt;Prometheus 安装&lt;/b&gt;&lt;/h5&gt;&lt;p&gt;centos6的安装参考&lt;a href
    
    </summary>
    
    
  </entry>
  
</feed>
