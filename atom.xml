<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>t1ger的茶馆</title>
  <subtitle>头顶有光终是幻，足下生云未是仙</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://t1ger.github.io/"/>
  <updated>2017-08-23T07:50:02.741Z</updated>
  <id>https://t1ger.github.io/</id>
  
  <author>
    <name>t1ger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go基础08 面向对象的基本概念</title>
    <link href="https://t1ger.github.io/2017/08/23/Go%E5%9F%BA%E7%A1%8008-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://t1ger.github.io/2017/08/23/Go基础08-面向对象的基本概念/</id>
    <published>2017-08-23T07:11:22.000Z</published>
    <updated>2017-08-23T07:50:02.741Z</updated>
    
    <content type="html"><![CDATA[<p>Go里没有class关键字,通过使用struct和interface实现面向对象的思想.<br>在传统的面向对象语言中,class是基本单位,是数据成员和当前定义的所有操作,并对外提供公共方法让使用者操作对象.而且必须一开始就定义好了那些操作,不能开放式扩展.</p>
<ul>
<li><p>结构体<br>如果要某个符号对其它包访问,需要将该符合定义为以大写字母开头</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">type Human struct &#123;</div><div class="line">    name string</div><div class="line">    age  int</div><div class="line">    Height float64</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  一个Golang对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//定义一个Human类包含name和age</div><div class="line">type Human struct &#123;</div><div class="line">    name string</div><div class="line">    age  int</div><div class="line">&#125;</div><div class="line"></div><div class="line">//定义一个Men接口</div><div class="line">type Men interface &#123;</div><div class="line">    Say()</div><div class="line">&#125;</div><div class="line"></div><div class="line">//带接收参数的函数称为method</div><div class="line">func (h Human) Say() &#123;</div><div class="line">    fmt.Println(&quot;hello %s&quot;, h.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>组合<br>Golang里没有继承,是通过匿名组合来实现,没有传统的继承关系链,同时还能重用父类的方法和成员<br>来看下面的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">type Base struct &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func (b Base)show() &#123;</div><div class="line">    println(&quot;hello ws&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Child struct &#123;</div><div class="line">    Base</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    child := Child&#123;&#125;</div><div class="line">    child.Show()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接口<br>Go语言中的接口是一系列操作定义的集合,不允许进行实现，而且也不能定义变量或者常量,这种非侵入式的设计，是为了解耦。接口和类本是不同的东西：类是把数据和代码包装在一起，是为了对内实现,接口则像是一种契约，是为了对外展示,Go语言中如果某个对象实现了这个接口的所有方法,那么就可以说这个对象实现了这个接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">type Interface interface &#123;</div><div class="line">    Len() int</div><div class="line">    Less(i, j int) bool</div><div class="line">    Swap(i, j int)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  空interface(interface{})不包含任何的method，正因为如此，所有的类型都实现了空interface。空interface对于描述起不到任何的作用(因为它不包含任何的method），但是空interface在我们需要存储任意类型的数值的时候相当有用，因为它可以存储任意类型的数值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a interface&#123;&#125; //define a null interface</div><div class="line">var i int = 5</div><div class="line">s := &quot;Hello world&quot; </div><div class="line">a = int     // a 可以存储任意类型的数值</div><div class="line">a = s</div></pre></td></tr></table></figure>
<p>  一个函数把interface{}作为参数，那么他可以接受任意类型的值作为参数，如果一个函数返回interface{},那么也就可以返回任意类型的值</p>
</li>
<li><p>总结<br>struct是变量的集合<br>interface是方法的集合<br>struct与interface都支持匿名字段, 换言之, 支持组合实现继承<br>golang的struct与C++的class一样, 只能声明变量, 不能初始化</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go里没有class关键字,通过使用struct和interface实现面向对象的思想.&lt;br&gt;在传统的面向对象语言中,class是基本单位,是数据成员和当前定义的所有操作,并对外提供公共方法让使用者操作对象.而且必须一开始就定义好了那些操作,不能开放式扩展.&lt;/p&gt;
&lt;u
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础07 函数</title>
    <link href="https://t1ger.github.io/2017/08/22/Go%E5%9F%BA%E7%A1%8007-%E5%87%BD%E6%95%B0/"/>
    <id>https://t1ger.github.io/2017/08/22/Go基础07-函数/</id>
    <published>2017-08-22T10:57:57.000Z</published>
    <updated>2017-08-23T03:16:14.697Z</updated>
    
    <content type="html"><![CDATA[<p>函数最重要的目的是方便我们重复使用相同的一段程序。</p>
<p>将一些操作隶属于一个函数，以后你想实现相同的操作的时候，只用调用函数名就可以，而不需要重复敲所有的语句。</p>
<ul>
<li><p>函数的定义<br>首先，我们要定义一个函数, 以说明这个函数的功能。<br>func function_name( [parameter_list] ) [return_types] {<br>  函数体<br>}<br>func：函数由 func 开始声明<br>function_name：函数名称，函数名和参数列表一起构成了函数签名<br>parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数<br>return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的<br>函数体：函数定义的代码集合<br>下面来看个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func sum(a, b int) int &#123;</div><div class="line">    var c int</div><div class="line">    c = a + b</div><div class="line">    return c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这个函数的功能是求两个数的和。</p>
</li>
<li><p>函数调用和参数传递<br>当创建函数时，你定义了函数需要做什么，通过调用改函数来执行指定任务。<br>调用函数，向函数传递参数，并返回值，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var a, b int = 3 ,5</div><div class="line">    var ret int</div><div class="line">    ret = sum(a, b)</div><div class="line">    fmt.Println(&quot;sum is %d&quot;, ret)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func sum(a, b int) int &#123;</div><div class="line">    var c int</div><div class="line">    c = a + b</div><div class="line">    return c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数参数<br>值传递:值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。<br>引用传递:引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。<br>默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。<br>不管是指针,引用类型还是其他类型参数,都是值拷贝传递.区别是拷贝的是对象本身还是拷贝指针</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    a := 100</div><div class="line">    p := &amp;a</div><div class="line">	</div><div class="line">    fmt.Printf(&quot;variable a pointer: %p, value: %d&quot;, &amp;a, a)</div><div class="line">    fmt.Printf(&quot;actual parameter p pointer: %p, value: %p&quot;, &amp;p, p&quot;)</div><div class="line">    show(p)</div><div class="line">&#125;	</div><div class="line">func show(x *int) &#123;</div><div class="line">    fmt.Printf(&quot;formal parameter x pointer: %p, value:%p&quot;, &amp;x, x)</div><div class="line">&#125;</div><div class="line"></div><div class="line">[tiger@bogon tiger]$ go run fun_add.go </div><div class="line">variable a pointer:0xc42000e258,value:100</div><div class="line">actual parameter p pointer: 0xc42000c028, value: 0xc42000e258</div><div class="line">formal parameter x pointer: 0xc42000c038, value:0xc42000e258</div></pre></td></tr></table></figure>
<p>  在调用函数时,新建立了x的内存,将参数p的值复制进去.这样x就保存了a的地址</p>
</li>
<li><p>总结<br>函数的目的： 提高程序的重复可用性。<br>练习:<br>写一个判断闰年的函数，参数为年、月、日。若是是闰年，返回True</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数最重要的目的是方便我们重复使用相同的一段程序。&lt;/p&gt;
&lt;p&gt;将一些操作隶属于一个函数，以后你想实现相同的操作的时候，只用调用函数名就可以，而不需要重复敲所有的语句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数的定义&lt;br&gt;首先，我们要定义一个函数, 以说明这个函数的功能。&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础06 循环</title>
    <link href="https://t1ger.github.io/2017/08/22/Go%E5%9F%BA%E7%A1%8006-%E5%BE%AA%E7%8E%AF/"/>
    <id>https://t1ger.github.io/2017/08/22/Go基础06-循环/</id>
    <published>2017-08-22T10:23:37.000Z</published>
    <updated>2017-08-22T09:51:04.373Z</updated>
    
    <content type="html"><![CDATA[<p>循环用于重复执行一些程序块。</p>
<ul>
<li><p>for循环<br>for循环需要预先设定好循环的次数(n)，然后执行隶属于for的语句n次。<br>基本构造是<br>for init; condition; post { }<br>for condition { }<br>for { }<br>举例来说，我们编辑一个叫forDemo.py的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for a:=0; a&lt; 10; a++ &#123;</div><div class="line">        fmt.Println(&quot;a value is: %d&quot;, a)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>无限循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for true &#123;</div><div class="line">        fmt.Println(&quot;this is for loop&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>中断循环<br>continue   // 在循环的某一次执行中，如果遇到continue, 那么跳过这一次执行，进行下一次的操作<br>break      // 停止执行整个循环<br>goto       //将控制转移到被标记的语句,这里不做过多介绍</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for a:=0; a&lt; 10; a++ &#123;</div><div class="line">        if a == 2 &#123;</div><div class="line">            continue</div><div class="line">        &#125;</div><div class="line">    fmt.Println(&quot;a value is: %d&quot;, a)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  当循环执行到i = 2的时候，if条件成立，触发continue, 跳过本次执行(不执行print)，继续进行下一次执行(i = 3)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    for a:=0; a&lt; 10; a++ &#123;</div><div class="line">        if a == 2 &#123;</div><div class="line">            break</div><div class="line">        &#125;</div><div class="line">        fmt.Println(&quot;a value is: %d&quot;, a)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  当循环执行到i = 2的时候，if条件成立，触发break, 整个循环停止。</p>
</li>
<li><p>总结<br>for循环<br>break<br>continue</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环用于重复执行一些程序块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;for循环&lt;br&gt;for循环需要预先设定好循环的次数(n)，然后执行隶属于for的语句n次。&lt;br&gt;基本构造是&lt;br&gt;for init; condition; post { }&lt;br&gt;for condition 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础05 条件</title>
    <link href="https://t1ger.github.io/2017/08/22/Go%E5%9F%BA%E7%A1%8005-%E6%9D%A1%E4%BB%B6/"/>
    <id>https://t1ger.github.io/2017/08/22/Go基础05-条件/</id>
    <published>2017-08-22T08:38:14.000Z</published>
    <updated>2017-08-22T09:22:24.089Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>if语句<br>写一个完整的程序,命名为ifDemo.go.这个程序用于实现if结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var  x, i int = 1, 1</div><div class="line">    if i &gt; 0 &#123;</div><div class="line">        fmt.Println(&quot;x=%d &quot;,x+1)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  复杂一些的if</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package main </div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var i int = 1       </div><div class="line">        if i&gt;0 &#123;</div><div class="line">            fmt.Println(&quot;positive i&quot;)</div><div class="line">                i++</div><div class="line">        &#125;else if i == 0 &#123;</div><div class="line">            fmt.Println(&quot;i is 0&quot;)</div><div class="line">                i = i*10</div><div class="line">        &#125;else &#123;</div><div class="line">            fmt.Println(&quot;negative i&quot;)</div><div class="line">                i--</div><div class="line">        &#125;</div><div class="line">        fmt.Println(&quot;new i: &quot;, i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这里有三个块,分别属于if, else if, else 程序根据条件，只执行三个分支中的一个</p>
<p>  整个if可以放在另一个if语句中，也就是if结构的嵌套使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var i int = 5</div><div class="line">	if i &gt; 1 &#123;</div><div class="line">	    fmt.Println(&quot;i bigger than 1&quot;)</div><div class="line">		fmt.Println(&quot;good&quot;)</div><div class="line">		if i &gt;2 &#123;</div><div class="line">		    fmt.Println(&quot;i bigger than 2&quot;)</div><div class="line">			fmt.Println(&quot;even better&quot;)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>switch语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var i int = 4</div><div class="line">    switch i &#123;</div><div class="line">        case 5: </div><div class="line">            fmt.Println(&quot;better&quot;)</div><div class="line">        case 3: </div><div class="line">            fmt.Println(&quot;good&quot;)</div><div class="line">        case 2:</div><div class="line">            fmt.Println(&quot;not bad&quot;)</div><div class="line">        default:</div><div class="line">            fmt.Println(&quot;bad&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>select语句<br>select 的代码形式和 switch 非常相似，不过 select 的 case 里的操作语句只能是[IO 操作]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var c1, c2, c3 chan int</div><div class="line">    var a, b int</div><div class="line">    select &#123;</div><div class="line">        case a = &lt;-c1: </div><div class="line">            fmt.Println(&quot;receive %v from c1&quot;, a)</div><div class="line">        case c2 &lt;- b: </div><div class="line">            fmt.Println(&quot;send %v to c2&quot;, b)</div><div class="line">        default:</div><div class="line">            fmt.Println(&quot;not ready&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  代码执行到 select 时，case 语句会按照源代码的顺序被评估，且只评估一次，评估的结果会出现下面这几种情况<br>除 default 外，如果只有一个 case 语句评估通过，那么就执行这个case里的语句；<br>除 default 外，如果有多个 case 语句评估通过，那么通过伪随机的方式随机选一个；<br>如果 default 外的 case 语句都没有通过评估，那么执行 default 里的语句；<br>如果没有 default，那么 代码块会被阻塞，指导有一个 case 通过评估；否则一直阻塞<br>如果 case 语句中 的 receive 操作的对象是 nil channel，那么也会阻塞</p>
</li>
<li><p>总结<br>if 语句由一个布尔表达式后紧跟一个或多个语句组成,可以在 if 或 else if 语句中嵌入一个或多个 if 或 else if 语句<br>switch 语句用于基于不同条件执行不同动作。<br>select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行.如果 case 语句中 的 receive 操作的对象是 nil channel，那么也会阻塞</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;if语句&lt;br&gt;写一个完整的程序,命名为ifDemo.go.这个程序用于实现if结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础04 运算</title>
    <link href="https://t1ger.github.io/2017/08/22/Go%E5%9F%BA%E7%A1%8004-%E8%BF%90%E7%AE%97/"/>
    <id>https://t1ger.github.io/2017/08/22/Go基础04-运算/</id>
    <published>2017-08-22T07:57:40.000Z</published>
    <updated>2017-08-22T07:36:00.426Z</updated>
    
    <content type="html"><![CDATA[<p>Go的运算符和其他语言类似</p>
<p>（我们暂时只了解这些运算符的基本用法，方便我们展开后面的内容，高级应用暂时不介绍）</p>
<ul>
<li><p>数学运算</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var a int = 21</div><div class="line">	var b int = 10</div><div class="line">	var c int</div><div class="line">	</div><div class="line">	c= a + b</div><div class="line">	fmt.Println(&quot;a+b=%d &quot;,c)</div><div class="line">	c= a - b</div><div class="line">	fmt.Println(&quot;a-b=%d &quot;,c)</div><div class="line">	c= a * b</div><div class="line">	fmt.Println(&quot;a*b=%d &quot;,c)</div><div class="line">	c= a / b</div><div class="line">	fmt.Println(&quot;a/b=%d &quot;,c)</div><div class="line">        c = a % b</div><div class="line">	fmt.Println(&quot;a%b=%d &quot;,c)</div><div class="line">        a++</div><div class="line">	fmt.Println(&quot;a++=%d &quot;,a)</div><div class="line">	a--</div><div class="line">	fmt.Println(&quot;a++=%d &quot;,a)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var a int = 21</div><div class="line">    var b int = 10</div><div class="line">    fmt.Println(&quot;a==b is&quot;, a==b)</div><div class="line">    fmt.Println(&quot;a!=b is&quot;, a!=b)</div><div class="line">    fmt.Println(&quot;a&lt;b is&quot;, a&lt;b)</div><div class="line">    fmt.Println(&quot;a&lt;=b is&quot;, a&lt;=b)</div><div class="line">    fmt.Println(&quot;a&gt;b is&quot;, a&gt;b)</div><div class="line">    fmt.Println(&quot;a&gt;=b is&quot;, a&gt;=b)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var a bool = true</div><div class="line">    var b bool = false     </div><div class="line">    fmt.Println(&quot;a&amp;&amp;b is&quot;, a&amp;&amp;b)</div><div class="line">    fmt.Println(&quot;a||b is&quot;, a||b)</div><div class="line">    fmt.Println(&quot;!(a&amp;&amp;b) is&quot;, !(a&amp;&amp;b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>总结<br>数学 +, - , *, /, %, ++, –<br>判断 ==, !=, &gt;, &gt;=, &lt;, &lt;=<br>逻辑 &amp;&amp;, ||, !</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go的运算符和其他语言类似&lt;/p&gt;
&lt;p&gt;（我们暂时只了解这些运算符的基本用法，方便我们展开后面的内容，高级应用暂时不介绍）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数学运算&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础03数组和切片</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%9F%BA%E7%A1%8003%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/"/>
    <id>https://t1ger.github.io/2017/08/21/Go基础03数组和切片/</id>
    <published>2017-08-21T10:54:54.000Z</published>
    <updated>2017-08-22T06:56:32.329Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>数组<br>数组是一系列同一类型数据的集合.数组中包含的每个元素被称为数组元素,一个数组包含的元素个数称为数组的长度.数组长度在定义后就不能更改.<br>go数组的定义:<br>[32]byte<br>[2<em>N] struct {x, y int 32}<br>[1000]</em>float64<br>[3][5]int<br>[2][2][2]float64<br>go数组初始化:<br>初始化数组中 {} 中的元素个数不能大于 [] 中的数字<br>var balance = [5]float32{999.9, 3.0, 5.8, 8.9, 3.9}<br>如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：<br>var balance = […]float32{999.9, 3.0, 5.8, 8.9, 3.9}<br>go数组的完整操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var n [10]int  // n 是一个长度为10的数组</div><div class="line">	var i,j int</div><div class="line">	</div><div class="line">	// 初始化数组元素</div><div class="line">	for i=0;i&lt;10;i++&#123;</div><div class="line">	    n[i]=i+100</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">	//输出每个数组元素的值</div><div class="line">	for j=0;j&lt;10;j++ &#123;</div><div class="line">	    fmt.Printf(&quot;Element[%d] = %d\n&quot;, j, n[j] )</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>切片<br>切片是对数组的抽象,是在数组之上进行的一层封装,切片的长度不固定,可以追加元素.切片的容量即隐藏数组的长度。长度可变指的是在数组长度的范围内可变<br>go切片的定义:<br>var slice1 []type<br>var slice1 []type = make([]type, len)<br>slice1 := make([]type, len)<br>slice1 := make([]type, len, cap)<br>go切片初始化:<br>s := []int{1, 2, 3} //直接初始化切片，[]表示是切片类型，{1,2,3}初始化值依次是1,2,3.其cap=len=3<br>s := arr[:]  //初始化切片s,是数组arr的引用<br>s := arr[startIndex:endIndex] //将arr中从下标startIndex到endIndex-1 下的元素创建为一个新的切片<br>s := arr[startIndex:] //缺省endIndex时将表示一直到arr的最后一个元素<br>s := arr[:endIndex]  //缺省startIndex时将表示从arr的第一个元素开始<br>s1 := s[startIndex:endIndex] //通过切片s初始化切片s1<br>s :=make([]int,len,cap)  //通过内置函数make()初始化切片s,[]int 标识为其元素类型为int的切片<br>创建数组切片:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">   </div><div class="line">	var myArray [10]int = [10]int&#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;  //定义一个数组</div><div class="line">	var mySlice []int = myArray[:5]</div><div class="line">	var mySlice1 []int  //一个切片在未初始化之前默认为 nil，长度为 0</div><div class="line">	</div><div class="line">	fmt.Println(&quot;Elements of myArray: &quot;)</div><div class="line">	for _,v := range myArray&#123;</div><div class="line">	    fmt.Print(v, &quot; &quot;)</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	fmt.Println(&quot;\nElements of mySlice: &quot;)</div><div class="line">	</div><div class="line">	//元素遍历</div><div class="line">	for _, v := range mySlice &#123;</div><div class="line">	    fmt.Print(v, &quot; &quot;)</div><div class="line">	&#125;</div><div class="line">	fmt.Println()</div><div class="line">	</div><div class="line">	//动态增加	</div><div class="line">	mySlice = append(mySlice, 1, 2, 3)</div><div class="line">	fmt.Println(mySlice)</div><div class="line">	</div><div class="line">	//内容复制</div><div class="line">	copy(mySlice, mySlice1)</div><div class="line">	fmt.Println(mySlice1)</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  关于动态追加,需要注意,如果定义 mySlice2 = []int{8, 9, 10} ,需要 mySlice = append(mySlice, mySlice2…)<br>mySlice2后的三个点表示把mySlice2包含的元素打散后传入,等同于 mySlice = append(mySlice, 7, 8, 9)</p>
</li>
<li><p>总结<br>数组定长,定义后不可更改.切片的长度不固定<br>数组的定义 初始化 遍历<br>切片的定义 初始化 遍历 增加 复制,空切片初始化之前默认为nil,长度为0</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组&lt;br&gt;数组是一系列同一类型数据的集合.数组中包含的每个元素被称为数组元素,一个数组包含的元素个数称为数组的长度.数组长度在定义后就不能更改.&lt;br&gt;go数组的定义:&lt;br&gt;[32]byte&lt;br&gt;[2&lt;em&gt;N] struct {x, y int 3
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础02基本数据类型</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%9F%BA%E7%A1%8002%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://t1ger.github.io/2017/08/21/Go基础02基本数据类型/</id>
    <published>2017-08-21T08:58:39.000Z</published>
    <updated>2017-08-21T09:41:07.810Z</updated>
    
    <content type="html"><![CDATA[<p>简单的数据类型以及赋值</p>
<ul>
<li><p>声明变量<br>var a int<br>var a string<br>var a [10]int    //array<br>var a []int      //slice<br>var a struct {<br>  f int<br>}<br>var a *int    //pointer<br>var a map[string]int //map,key is string type<br>var a func(b int) int<br>var (<br>  a int<br>  b string<br>)</p>
</li>
<li><p>基本数据类型<br>先看内置类型<br>int/uint   //int8、 byte、 int16、 int、 uint、 uintptr<br>float      //float32 、 float64<br>string<br>bool<br>rune       //int32别名,表示unicode的字符<br>error<br>复合类型<br>slice, map, chan<br>interface<br>func<br>array<br>以上是最常用的数据类型。此外还有以下类型，有兴趣的可以学习一下<br>complex   //复数类型<br>byte      //uint8别名<br>uintptr   //指针用的类型<br>下面是基本数据类型的赋值<br>var a int =10<br>var a float =1.3<br>var a bool =True<br>var a string =”Hello”<br>一般情况下,值类型默认为0, bool默认为false, string为空串<br>如何判断自己的类型呢? 可以尝试下每个类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">        &quot;fmt&quot;</div><div class="line">        &quot;reflect&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">        var a float32 = 1.3</div><div class="line">        fmt.Println(&quot;type:&quot;, reflect.TypeOf(a))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>总结<br>变量需要声明才能使用<br>内置类型和复合类型<br>整形, 浮点数, 布尔, 字符串</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的数据类型以及赋值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;声明变量&lt;br&gt;var a int&lt;br&gt;var a string&lt;br&gt;var a [10]int    //array&lt;br&gt;var a []int      //slice&lt;br&gt;var a struct {&lt;b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go基础01 Hello World</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%9F%BA%E7%A1%8001-Hello-World/"/>
    <id>https://t1ger.github.io/2017/08/21/Go基础01-Hello-World/</id>
    <published>2017-08-21T08:23:03.000Z</published>
    <updated>2017-08-21T07:59:37.674Z</updated>
    
    <content type="html"><![CDATA[<p>简单的‘Hello World!’</p>
<ul>
<li>go命令行<br>假设你已经安装好了go, 那么在Linux命令行输入:<br>[tiger@bogon go]$ go version<br>go version go1.8.3 linux/amd64</li>
</ul>
<ul>
<li><p>写一段小程序<br>用文本编辑器写一个.go结尾的文件，比如说hello.go<br>在hello.go中写入如下，并保存:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[tiger@bogon go]$ cat hello.go </div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    fmt.Println(&quot;Hello, world. 你好, 世界! &quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  退出文本编辑器，然后在命令行输入:<br>$go run hello.go<br>来运行hello.go。可以看到go随后输出<br>Hello, world. 你好, 世界!</p>
</li>
<li><p>编译后执行<br>我们还可以将hello.go编译后在运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[tiger@bogon go]# go build hello.go </div><div class="line">[tiger@bogon go]# ls</div><div class="line">hello  hello.go</div><div class="line">[tiger@bogon go]# ./hello </div><div class="line">Hello, world. 你好, 世界!</div></pre></td></tr></table></figure>
</li>
<li><p>总结<br>fmt.Println()<br>直接运行: go run hello.go<br>编译后运行: go build hello.go 之后在运行</p>
</li>
</ul>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的‘Hello World!’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go命令行&lt;br&gt;假设你已经安装好了go, 那么在Linux命令行输入:&lt;br&gt;[tiger@bogon go]$ go version&lt;br&gt;go version go1.8.3 linux/amd64&lt;/li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go快速教程(手册)</title>
    <link href="https://t1ger.github.io/2017/08/21/Go%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B-%E6%89%8B%E5%86%8C/"/>
    <id>https://t1ger.github.io/2017/08/21/Go快速教程-手册/</id>
    <published>2017-08-21T08:17:41.000Z</published>
    <updated>2017-08-21T07:59:15.074Z</updated>
    
    <content type="html"><![CDATA[<p>说明</p>
<ol>
<li>教程将专注于go基础，语法基于go1.8 , 测试环境为Linux</li>
<li>我将专注于go的主干，以便读者能以最快时间对go形成概念</li>
<li>Linux命令行将以 $ 开始，比如 $ls</li>
<li>单行注释会以 // 开始,多行均已以 /* 开头，并以 */ 结尾</li>
</ol>
<p>建议</p>
<ol>
<li>将教程中的命令敲到go中看看效果</li>
<li>你可以在了解之后立即去查看相关更完备的内容 (比如查阅官方文档)</li>
</ol>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;教程将专注于go基础，语法基于go1.8 , 测试环境为Linux&lt;/li&gt;
&lt;li&gt;我将专注于go的主干，以便读者能以最快时间对go形成概念&lt;/li&gt;
&lt;li&gt;Linux命令行将以 $ 开始，比如 $ls&lt;/li&gt;
&lt;li&gt;单行注释会以 /
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>how to use docker in windows</title>
    <link href="https://t1ger.github.io/2017/08/16/how-to-use-docker-in-windows/"/>
    <id>https://t1ger.github.io/2017/08/16/how-to-use-docker-in-windows/</id>
    <published>2017-08-16T03:06:29.000Z</published>
    <updated>2017-08-16T05:20:04.127Z</updated>
    
    <content type="html"><![CDATA[<p>前言<br>本文运行环境针对Windows 10操作系统,主要解决的痛点是各种平台开发环境的不统一以及多版本共存的问题.主要讲解如何安装docker和使用内网registry</p>
<p>在windows环境下,如何安装docker呢? Docker Toolbox 是一个不错的选择,你可以在Mac或者Windows上像安装其它应用一样来安装它.<br>下载点击<a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">这里</a></p>
<h5 id="Docker-Toolbox-安装"><a href="#Docker-Toolbox-安装" class="headerlink" title="Docker Toolbox 安装"></a><b>Docker Toolbox 安装</b></h5><p>默认安装完成后,安装目录结构如下<br> boot2docker.iso<br> docker-compose.exe<br> docker-machine.exe<br> docker-quickstart-terminal.ico<br> docker.exe<br> installers<br> kitematic<br> start.sh<br> unins000.dat<br> unins000.exe</p>
<p>未避免因为墙无法下载问题,我们手动将boot2docker.iso文件拷贝到C:\Users\用户名.docker\machine\cache目录下</p>
<p>现在有两种启动方式,一个是图形启动,一个是命令行方式启动.<br>图形启动的就双击Kitematic<br>命令行启动就双击docker-quickstart-terminal</p>
<p>备注:非administrator用户,请右键-以管理员身份运行,运行如下</p>
<p>命令行启动如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">Running pre-create checks...</div><div class="line">Creating machine...</div><div class="line">(default) Copying C:\Users\abc\.docker\machine\cache\boot2docker.iso to C:\Users\abc\.docker\machine\machines\default\boot2docker.iso...</div><div class="line">(default) Creating VirtualBox VM...</div><div class="line">(default) Creating SSH key...</div><div class="line">(default) Starting the VM...</div><div class="line">(default) Check network to re-create if needed...</div><div class="line">(default) Windows might ask for the permission to create a network adapter. Sometimes, such confirmation window is minimized in the taskbar.</div><div class="line">(default) Found a new host-only adapter: &quot;VirtualBox Host-Only Ethernet Adapter #2&quot;</div><div class="line">(default) Windows might ask for the permission to configure a network adapter. Sometimes, such confirmation window is minimized in the taskbar.</div><div class="line">(default) Windows might ask for the permission to configure a dhcp server. Sometimes, such confirmation window is minimized in the taskbar.</div><div class="line">(default) Waiting for an IP...</div><div class="line">Waiting for machine to be running, this may take a few minutes...</div><div class="line">Detecting operating system of created instance...</div><div class="line">Waiting for SSH to be available...</div><div class="line">Detecting the provisioner...</div><div class="line">Provisioning with boot2docker...</div><div class="line">Copying certs to the local machine directory...</div><div class="line">Copying certs to the remote machine...</div><div class="line">Setting Docker configuration on the remote daemon...</div><div class="line">Checking connection to Docker...</div><div class="line">Docker is up and running!</div><div class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: C:\Program Files\Docker Toolbox\docker-machine.exe env default</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">                        ##         .</div><div class="line">                  ## ## ##        ==</div><div class="line">               ## ## ## ## ##    ===</div><div class="line">           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\___/ ===</div><div class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</div><div class="line">           \______ o           __/</div><div class="line">             \    \         __/</div><div class="line">              \____\_______/</div><div class="line"></div><div class="line">docker is configured to use the default machine with IP 192.168.99.100</div><div class="line">For help getting started, check out the docs at https://docs.docker.com</div><div class="line"></div><div class="line">Start interactive shell</div></pre></td></tr></table></figure></p>
<p>到这里我们就安装完了,查看下docker版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">$ docker info</div><div class="line">Containers: 1</div><div class="line"> Running: 1</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 0</div><div class="line">Images: 1</div><div class="line">Server Version: 17.06.0-ce</div><div class="line">Storage Driver: aufs</div><div class="line"> Root Dir: /mnt/sda1/var/lib/docker/aufs</div><div class="line"> Backing Filesystem: extfs</div><div class="line"> Dirs: 16</div><div class="line"> Dirperm1 Supported: true</div><div class="line">Logging Driver: json-file</div><div class="line">Cgroup Driver: cgroupfs</div><div class="line">Plugins:</div><div class="line"> Volume: local</div><div class="line"> Network: bridge host macvlan null overlay</div><div class="line"> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog</div><div class="line">Swarm: inactive</div><div class="line">Runtimes: runc</div><div class="line">Default Runtime: runc</div><div class="line">Init Binary: docker-init</div><div class="line">containerd version: cfb82a876ecc11b5ca0977d1733adbe58599088a</div><div class="line">runc version: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4</div><div class="line">init version: 949e6fa</div><div class="line">Security Options:</div><div class="line"> seccomp</div><div class="line">  Profile: default</div><div class="line">Kernel Version: 4.4.74-boot2docker</div><div class="line">Operating System: Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017</div><div class="line">OSType: linux</div><div class="line">Architecture: x86_64</div><div class="line">CPUs: 1</div><div class="line">Total Memory: 995.8MiB</div><div class="line">Name: default</div><div class="line">ID: G6PB:FV47:YOTF:CIHJ:GNUB:DTML:7GQ2:6GOO:5WIK:EB3J:J4WR:2DVZ</div><div class="line">Docker Root Dir: /mnt/sda1/var/lib/docker</div><div class="line">Debug Mode (client): false</div><div class="line">Debug Mode (server): true</div><div class="line"> File Descriptors: 41</div><div class="line"> Goroutines: 50</div><div class="line"> System Time: 2017-08-14T08:10:46.381858948Z</div><div class="line"> EventsListeners: 1</div><div class="line">Registry: https://index.docker.io/v1/</div><div class="line">Labels:</div><div class="line"> provider=virtualbox</div><div class="line">Experimental: false</div><div class="line">Insecure Registries:</div><div class="line"> 127.0.0.0/8</div><div class="line">Live Restore Enabled: false</div></pre></td></tr></table></figure></p>
<p>图形启动的话,会让我们登录到 Docker Hub。如果我们还没有账户或者还不想登录，可以点击 SKIP FOR NOW 继续后面的步骤.<br>完成之后，就会出现 Kitematic 应用程序的第一个界面.<br>在这里,我们会看到hello-world-nginx,如果找不到,可以在搜索区域搜索hello world nginx,我们点击 Create 来部署容器,在镜像下载完成之后,它会自动部署.我们可以在 Kitematic界面上预览web页面</p>
<h5 id="主机与docker主机共享文件夹"><a href="#主机与docker主机共享文件夹" class="headerlink" title="主机与docker主机共享文件夹"></a><b>主机与docker主机共享文件夹</b></h5><p>假设我们需要共享的work文件夹,我们需要打开Oracle VM VirtualBox，选中“正在运行”状态的 default 虚拟机，进入 设置-&gt; 共享文件夹，添加共享文件夹，选中work文件夹，勾选“自动挂载”、“固定分配”，确定.<br>重启完成后,通过终端连接docker主机,输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">$ docker-machine.exe ssh default</div><div class="line">                        ##         .</div><div class="line">                  ## ## ##        ==</div><div class="line">               ## ## ## ## ##    ===</div><div class="line">           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\___/ ===</div><div class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</div><div class="line">           \______ o           __/</div><div class="line">             \    \         __/</div><div class="line">              \____\_______/</div><div class="line"> _                 _   ____     _            _</div><div class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</div><div class="line">| &apos;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &apos;__|</div><div class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</div><div class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</div><div class="line">Boot2Docker version 17.06.0-ce, build HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017</div><div class="line">Docker version 17.06.0-ce, build 02c1d87</div><div class="line">docker@default:~$ mount</div><div class="line">tmpfs on / type tmpfs (rw,relatime,size=917692k)</div><div class="line">proc on /proc type proc (rw,relatime)</div><div class="line">sysfs on /sys type sysfs (rw,relatime)</div><div class="line">devpts on /dev/pts type devpts (rw,relatime,mode=600,ptmxmode=000)</div><div class="line">tmpfs on /dev/shm type tmpfs (rw,relatime)</div><div class="line">fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)</div><div class="line">/dev/sda1 on /mnt/sda1 type ext4 (rw,relatime,data=ordered)</div><div class="line">cgroup on /sys/fs/cgroup type tmpfs (rw,relatime,mode=755)</div><div class="line">cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,relatime,cpuset)</div><div class="line">cgroup on /sys/fs/cgroup/cpu type cgroup (rw,relatime,cpu)</div><div class="line">cgroup on /sys/fs/cgroup/cpuacct type cgroup (rw,relatime,cpuacct)</div><div class="line">cgroup on /sys/fs/cgroup/blkio type cgroup (rw,relatime,blkio)</div><div class="line">cgroup on /sys/fs/cgroup/memory type cgroup (rw,relatime,memory)</div><div class="line">cgroup on /sys/fs/cgroup/devices type cgroup (rw,relatime,devices)</div><div class="line">cgroup on /sys/fs/cgroup/freezer type cgroup (rw,relatime,freezer)</div><div class="line">cgroup on /sys/fs/cgroup/net_cls type cgroup (rw,relatime,net_cls)</div><div class="line">cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,relatime,perf_event)</div><div class="line">cgroup on /sys/fs/cgroup/net_prio type cgroup (rw,relatime,net_prio)</div><div class="line">cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,relatime,hugetlb)</div><div class="line">cgroup on /sys/fs/cgroup/pids type cgroup (rw,relatime,pids)</div><div class="line">c/Users on /c/Users type vboxsf (rw,nodev,relatime)</div><div class="line">work on /work type vboxsf (rw,nodev,relatime)</div><div class="line">/dev/sda1 on /mnt/sda1/var/lib/docker/aufs type ext4 (rw,relatime,data=ordered)</div></pre></td></tr></table></figure></p>
<p>可以看到配置共享文件夹work成功.</p>
<h5 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a><b>创建容器<b></b></b></h5><p>在终端下输入以下命令,表示安装最新版本node的linux系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull node</div></pre></td></tr></table></figure></p>
<p>之后就可以通过使用该镜像生成容器了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#查看镜像</div><div class="line">docker images</div><div class="line">#生成容器</div><div class="line">docker run -d -p 3000:3000 node</div></pre></td></tr></table></figure></p>
<h5 id="定制开发环境"><a href="#定制开发环境" class="headerlink" title="定制开发环境"></a><b>定制开发环境</b></h5><p>这里有两种方法,一个是编写Dockerfile 发布到版本库,其他人从版本库下载本地编译;另一种是打包代码到镜像,上传到仓库,其他人从仓库下载运行.</p>
<p>假如我们的发布目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# tree</div><div class="line">.</div><div class="line">├── Dockerfile</div><div class="line">├── index.js</div><div class="line">└── package.json</div></pre></td></tr></table></figure></p>
<p>第一种方法就不多说了,这里我们来看下第二种方法,比如要发布nodejs应用,首先是要编写Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">FROM centos:centos6</div><div class="line">MAINTAINER WeiShao Project &lt;tiger@whistle.com.cn&gt;</div><div class="line">ENV NODEJS_VERSION=v8.3.0</div><div class="line">ENV PATH=/usr/local/node/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin</div><div class="line"></div><div class="line">RUN yum -y update; yum clean all</div><div class="line">RUN yum -y install epel-release; yum clean all</div><div class="line">RUN yum -y install make gcc gcc-c++ &amp;&amp; yum -y clean all</div><div class="line">RUN yum -y install xz</div><div class="line"></div><div class="line">RUN mkdir -p /usr/local &amp;&amp; cd /usr/local &amp;&amp; curl -s -L -O http://cdn.npm.taobao.org/dist/node/$&#123;NODEJS_VERSION&#125;/node-$&#123;NODEJS_VERSION&#125;-linux-x64.tar.xz &amp;&amp; tar xf node-$&#123;NODEJS_VERSION&#125;-linux-x64.tar.xz &amp;&amp; mv node-$&#123;NODEJS_VERSION&#125;-linux-x64 node</div><div class="line"></div><div class="line">RUN npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">RUN cnpm install -g pm2 --registry=https://registry.npm.taobao.org</div><div class="line"></div><div class="line">add . /usr/local/whistle/webapps/src</div><div class="line">RUN cd /usr/local/whistle/webapps/src; npm install</div><div class="line">EXPOSE 3000</div><div class="line"></div><div class="line">CMD [&quot;pm2-docker&quot;, &quot;/usr/local/whistle/webapps/src/index.js&quot;]</div></pre></td></tr></table></figure></p>
<p>我们的index.js和package.json 如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# cat index.js </div><div class="line">var express = require(&apos;express&apos;);</div><div class="line"></div><div class="line">// Constants</div><div class="line">var PORT = 3000;</div><div class="line"></div><div class="line">// App</div><div class="line">var app = express();</div><div class="line">app.get(&apos;/&apos;, function (req, res) &#123;</div><div class="line">  res.send(&apos;Hello World from CentOS6 in Docker\n&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(PORT)</div><div class="line">console.log(&apos;Running on http://localhost:&apos; + PORT);</div><div class="line"></div><div class="line"></div><div class="line">[root@localhost docker-node]# cat package.json </div><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;docker-centos-hello&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</div><div class="line">  &quot;description&quot;: &quot;Node.js Hello World app on CentOS6 using docker, created from the Node.js example on docker.io&quot;,</div><div class="line">  &quot;author&quot;: &quot;Wei Shao &lt;ws@whistle.com.cn&gt;&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;express&quot;: &quot;3.x&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们可以build我们的镜像了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# docker build -t registry.whistle.com.cn/node:8.3.0 .</div></pre></td></tr></table></figure></p>
<p>在等待一会之后就可以看到我们的镜像编译成功了,可以通过docker images查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker-node]# docker run -d -p 3000:3000 registry.whistle.com.cn/node:8.3.0</div></pre></td></tr></table></figure></p>
<p>现在通过<a href="http://192.168.99.100:3000/" target="_blank" rel="external">http://192.168.99.100:3000/</a> 就可以查看页面了.</p>
<p>如何才能让其他同事用这个镜像呢,这里我们要上传到自己的使用仓库里去<br>因为我们使用的是自签名证书,所以需要设置insecure-registry,执行以下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">docker-machine ssh default</div><div class="line">sudo vi /var/lib/boot2docker/profile</div><div class="line"></div><div class="line">EXTRA_ARGS=&quot;</div><div class="line">--insecure-registry registry.whistle.com.cn</div><div class="line">&quot;</div><div class="line">exit</div><div class="line">docker-machine restart</div><div class="line"></div><div class="line">or</div><div class="line">docker-machine ssh default &quot;sudo sed -i &apos;/EXTRA_ARGS=/a\--insecure-registry registry.whistle.com.cn&apos; /var/lib/boot2docker/profile&quot;</div><div class="line">docker-machine restart</div></pre></td></tr></table></figure></p>
<p>这样,我们就可以pull我们制作的node镜像了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push registry.whistle.com.cn/node:8.3.0</div></pre></td></tr></table></figure>
<p>可以在浏览器访问 <a href="https://registry.whistle.com.cn/v2/_catalog" target="_blank" rel="external">https://registry.whistle.com.cn/v2/_catalog</a> 查看仓库的镜像列表</p>
<p>其他同事在设置了insecure-registry之后就可以执行以下命令获取相应的镜像了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull registry.whistle.com.cn/node:8.3.0</div></pre></td></tr></table></figure>
<p>FAQ</p>
<ul>
<li>问:运行Kitematic时,卡在waiting for an IP的命令下.<br>答: 检查运行操作系统,win7下运行可能出现此问题,由于没有发布正式版，不推荐win7下使用. win7 下 Docker Quickstart Terminal可以运行正常</li>
<li>问:如何确认当前docker虚拟机状态<br>答: 在命令行里输入 docker-machine ls 查看,如果没有可以通过以下命令建立 docker-machine create –driver=virtualbox default</li>
<li>问: 如何才能自动生成Dockerfile呢<br>答: 可以通过starter来自动生成,还是建议学习下Dockerfile的相关基础知识.自动生成步骤如下<br>wget <a href="https://raw.githubusercontent.com/cloud66/starter/master/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/cloud66/starter/master/install.sh</a><br>chmod +x install.sh &amp;&amp; ./install.sh<br>cd appdir &amp;&amp; starter -g dockerfile,service<br>进行简单选择后即可在当前目录生成dockerfile文件</li>
<li>问: 如何查看registry 和images version<h1 id="curl-https-registry-whistle-com-cn-v2-catalog"><a href="#curl-https-registry-whistle-com-cn-v2-catalog" class="headerlink" title="curl https://registry.whistle.com.cn/v2/_catalog"></a>curl <a href="https://registry.whistle.com.cn/v2/_catalog" target="_blank" rel="external">https://registry.whistle.com.cn/v2/_catalog</a></h1>{“repositories”:[“hello-world”,”jenkins”,”node”,”svn”]} <h1 id="curl-https-registry-whistle-com-cn-v2-node-tag-list"><a href="#curl-https-registry-whistle-com-cn-v2-node-tag-list" class="headerlink" title="curl https://registry.whistle.com.cn/v2/node/tag/list"></a>curl <a href="https://registry.whistle.com.cn/v2/node/tag/list" target="_blank" rel="external">https://registry.whistle.com.cn/v2/node/tag/list</a></h1>{“name”:”node”,”tags”:[“8.3.0”]}</li>
</ul>
<p>ref<br><a href="http://www.cnblogs.com/studyzy/p/6113221.html" target="_blank" rel="external">在Windows中玩转Docker Toolbox</a><br><a href="https://stackoverflow.com/questions/30654306/allow-insecure-registry-in-host-provisioned-with-docker-machine" target="_blank" rel="external">allow insecure registry in host provisioned with docker-machine</a><br><a href="https://accenture.github.io/adop-docker-compose/docs/tools/docker-registry/" target="_blank" rel="external">Tools - Docker Registry</a><br><a href="http://blog.kazaff.me/2016/06/16/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%89docker%E4%BB%93%E5%BA%93/" target="_blank" rel="external">搭建本地私有Docker仓库</a><br><a href="http://www.cnblogs.com/wjoyxt/p/5855405.html" target="_blank" rel="external">Docker私有仓库 Registry中的镜像管理</a></p>
<hr>
<p>您的鼓励是我写作最大的动力</p>
<p>俗话说，投资效率是最好的投资。 如果您感觉我的文章质量不错，读后收获很大，预计能为您提高 10% 的工作效率，不妨小额捐助我一下，让我有动力继续写出更多好文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言&lt;br&gt;本文运行环境针对Windows 10操作系统,主要解决的痛点是各种平台开发环境的不统一以及多版本共存的问题.主要讲解如何安装docker和使用内网registry&lt;/p&gt;
&lt;p&gt;在windows环境下,如何安装docker呢? Docker Toolbox 是一
    
    </summary>
    
    
  </entry>
  
</feed>
